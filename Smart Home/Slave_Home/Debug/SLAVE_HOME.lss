
SLAVE_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002508  0000259c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000a0  008000a0  000025dc  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001005  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000612d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000629d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a73b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <main>
      8a:	0c 94 82 12 	jmp	0x2504	; 0x2504 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include"ADC_private.h"
#include"ADC_register.h"


void  ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if VOLT_REF==1
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif VOLT_REF==2
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
    #error "Wrong Choose TO Voltage Reference"
#endif

	/*Set Prescaler Devision Factor*/
		/*Using Bit_Masked*/
		ADCSRA &=0b11111000;
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 7f       	andi	r24, 0xF8	; 248
     b76:	8c 93       	st	X, r24
		ADCSRA |=PRESC;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 60       	ori	r24, 0x07	; 7
     b84:	8c 93       	st	X, r24

	/*Activate Left Adjust Result*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b86:	a7 e2       	ldi	r26, 0x27	; 39
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	/* Set ADC Enable State*/
#if  ADCSRA_ADEN_State==Enable
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
    #error "Wrong Choose TO ADC Enable State"

#endif


}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8GetChannelReading>:

u8    ADC_u8GetChannelReading(u8  copy_u8Channel)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
  /*Use Bit_Masked To Choose Channel*/
	  /*1_Clear The Mux Bits in ADMUX*/
	       ADMUX &=0b11100000;
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 7e       	andi	r24, 0xE0	; 224
     bc0:	8c 93       	st	X, r24
	  /*2_Set The Chosen Channel To Mux Bits*/
           ADMUX |= copy_u8Channel;
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	90 81       	ld	r25, Z
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	8c 93       	st	X, r24


  /*Start Conversion */
    	SET_BIT(ADCSRA,ADCSRA_ADSC);
     bd2:	a6 e2       	ldi	r26, 0x26	; 38
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e6 e2       	ldi	r30, 0x26	; 38
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8c 93       	st	X, r24

  /*Pulling (Busy Waiting) Until Setting The Conversion Flag */
    	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
     be0:	e6 e2       	ldi	r30, 0x26	; 38
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	82 95       	swap	r24
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	81 70       	andi	r24, 0x01	; 1
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	a9 f3       	breq	.-22     	; 0xbe0 <ADC_u8GetChannelReading+0x38>

  /*Clear Conversion Flag*/
    	SET_BIT(ADCSRA,ADCSRA_ADIF);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 61       	ori	r24, 0x10	; 16
     c02:	8c 93       	st	X, r24

   /*Return Reading*/  /*Suppose Using 8bit*/
    	return ADCH;
     c04:	e5 e2       	ldi	r30, 0x25	; 37
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z

}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <DIO_u8SetPortValue>:
#include"BIT_MATH.h"
#include"DIO_INTERFACE.h"
#include<avr/io.h>

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <DIO_u8SetPortValue+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <DIO_u8SetPortValue+0x8>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <DIO_u8SetPortValue+0xa>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	8a 83       	std	Y+2, r24	; 0x02
     c22:	6b 83       	std	Y+3, r22	; 0x03

   u8 Local_u8ErrorState=0;
     c24:	19 82       	std	Y+1, r1	; 0x01
   if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	28 f0       	brcs	.+10     	; 0xc36 <DIO_u8SetPortValue+0x24>
   {
	   Local_u8ErrorState=1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	89 83       	std	Y+1, r24	; 0x01
	  return Local_u8ErrorState;
     c30:	29 81       	ldd	r18, Y+1	; 0x01
     c32:	2e 83       	std	Y+6, r18	; 0x06
     c34:	34 c0       	rjmp	.+104    	; 0xc9e <DIO_u8SetPortValue+0x8c>
   }
   else
   {
	   switch(Copy_u8Port)
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	3d 83       	std	Y+5, r19	; 0x05
     c3e:	2c 83       	std	Y+4, r18	; 0x04
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	d1 f0       	breq	.+52     	; 0xc7e <DIO_u8SetPortValue+0x6c>
     c4a:	2c 81       	ldd	r18, Y+4	; 0x04
     c4c:	3d 81       	ldd	r19, Y+5	; 0x05
     c4e:	22 30       	cpi	r18, 0x02	; 2
     c50:	31 05       	cpc	r19, r1
     c52:	2c f4       	brge	.+10     	; 0xc5e <DIO_u8SetPortValue+0x4c>
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	61 f0       	breq	.+24     	; 0xc74 <DIO_u8SetPortValue+0x62>
     c5c:	1e c0       	rjmp	.+60     	; 0xc9a <DIO_u8SetPortValue+0x88>
     c5e:	2c 81       	ldd	r18, Y+4	; 0x04
     c60:	3d 81       	ldd	r19, Y+5	; 0x05
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	81 f0       	breq	.+32     	; 0xc88 <DIO_u8SetPortValue+0x76>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	83 30       	cpi	r24, 0x03	; 3
     c6e:	91 05       	cpc	r25, r1
     c70:	81 f0       	breq	.+32     	; 0xc92 <DIO_u8SetPortValue+0x80>
     c72:	13 c0       	rjmp	.+38     	; 0xc9a <DIO_u8SetPortValue+0x88>
	   {
	   case DIO_PORTA:PORTA=Copy_u8Value;break;
     c74:	eb e3       	ldi	r30, 0x3B	; 59
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	80 83       	st	Z, r24
     c7c:	0e c0       	rjmp	.+28     	; 0xc9a <DIO_u8SetPortValue+0x88>
	   case DIO_PORTB:PORTB=Copy_u8Value;break;
     c7e:	e8 e3       	ldi	r30, 0x38	; 56
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	80 83       	st	Z, r24
     c86:	09 c0       	rjmp	.+18     	; 0xc9a <DIO_u8SetPortValue+0x88>
	   case DIO_PORTC:PORTC=Copy_u8Value;break;
     c88:	e5 e3       	ldi	r30, 0x35	; 53
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	80 83       	st	Z, r24
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <DIO_u8SetPortValue+0x88>
	   case DIO_PORTD:PORTD=Copy_u8Value;break;
     c92:	e2 e3       	ldi	r30, 0x32	; 50
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	80 83       	st	Z, r24
	   default:;
        }
   }
return Local_u8ErrorState;
     c9a:	99 81       	ldd	r25, Y+1	; 0x01
     c9c:	9e 83       	std	Y+6, r25	; 0x06
     c9e:	8e 81       	ldd	r24, Y+6	; 0x06
}
     ca0:	26 96       	adiw	r28, 0x06	; 6
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	29 97       	sbiw	r28, 0x09	; 9
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	8a 83       	std	Y+2, r24	; 0x02
     cc8:	6b 83       	std	Y+3, r22	; 0x03
     cca:	4c 83       	std	Y+4, r20	; 0x04

 u8 Local_u8ErrorState=0;
     ccc:	19 82       	std	Y+1, r1	; 0x01

 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	84 30       	cpi	r24, 0x04	; 4
     cd2:	28 f0       	brcs	.+10     	; 0xcde <DIO_u8SetPinValue+0x2c>
    {
 	   Local_u8ErrorState=1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	89 83       	std	Y+1, r24	; 0x01
 	  return Local_u8ErrorState;
     cd8:	29 81       	ldd	r18, Y+1	; 0x01
     cda:	29 87       	std	Y+9, r18	; 0x09
     cdc:	f4 c0       	rjmp	.+488    	; 0xec6 <DIO_u8SetPinValue+0x214>
    }
 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	28 f0       	brcs	.+10     	; 0xcee <DIO_u8SetPinValue+0x3c>
 {
	   Local_u8ErrorState=1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	89 83       	std	Y+1, r24	; 0x01
       return Local_u8ErrorState;
     ce8:	39 81       	ldd	r19, Y+1	; 0x01
     cea:	39 87       	std	Y+9, r19	; 0x09
     cec:	ec c0       	rjmp	.+472    	; 0xec6 <DIO_u8SetPinValue+0x214>
 }
 else
 {
	 if(Copy_u8Value==DIO_HIGH)
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <DIO_u8SetPinValue+0x44>
     cf4:	6f c0       	rjmp	.+222    	; 0xdd4 <DIO_u8SetPinValue+0x122>
	 {

		 switch(Copy_u8Port)
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	38 87       	std	Y+8, r19	; 0x08
     cfe:	2f 83       	std	Y+7, r18	; 0x07
     d00:	8f 81       	ldd	r24, Y+7	; 0x07
     d02:	98 85       	ldd	r25, Y+8	; 0x08
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	91 05       	cpc	r25, r1
     d08:	49 f1       	breq	.+82     	; 0xd5c <DIO_u8SetPinValue+0xaa>
     d0a:	2f 81       	ldd	r18, Y+7	; 0x07
     d0c:	38 85       	ldd	r19, Y+8	; 0x08
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	2c f4       	brge	.+10     	; 0xd1e <DIO_u8SetPinValue+0x6c>
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	61 f0       	breq	.+24     	; 0xd34 <DIO_u8SetPinValue+0x82>
     d1c:	d2 c0       	rjmp	.+420    	; 0xec2 <DIO_u8SetPinValue+0x210>
     d1e:	2f 81       	ldd	r18, Y+7	; 0x07
     d20:	38 85       	ldd	r19, Y+8	; 0x08
     d22:	22 30       	cpi	r18, 0x02	; 2
     d24:	31 05       	cpc	r19, r1
     d26:	71 f1       	breq	.+92     	; 0xd84 <DIO_u8SetPinValue+0xd2>
     d28:	8f 81       	ldd	r24, Y+7	; 0x07
     d2a:	98 85       	ldd	r25, Y+8	; 0x08
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	91 05       	cpc	r25, r1
     d30:	e9 f1       	breq	.+122    	; 0xdac <DIO_u8SetPinValue+0xfa>
     d32:	c7 c0       	rjmp	.+398    	; 0xec2 <DIO_u8SetPinValue+0x210>
		 {
		 case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
     d34:	ab e3       	ldi	r26, 0x3B	; 59
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	eb e3       	ldi	r30, 0x3B	; 59
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_u8SetPinValue+0xa0>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_u8SetPinValue+0x9c>
     d56:	84 2b       	or	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	b3 c0       	rjmp	.+358    	; 0xec2 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
     d5c:	a8 e3       	ldi	r26, 0x38	; 56
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e8 e3       	ldi	r30, 0x38	; 56
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_u8SetPinValue+0xc8>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_u8SetPinValue+0xc4>
     d7e:	84 2b       	or	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	9f c0       	rjmp	.+318    	; 0xec2 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     d84:	a5 e3       	ldi	r26, 0x35	; 53
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e5 e3       	ldi	r30, 0x35	; 53
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_u8SetPinValue+0xf0>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_u8SetPinValue+0xec>
     da6:	84 2b       	or	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	8b c0       	rjmp	.+278    	; 0xec2 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     dac:	a2 e3       	ldi	r26, 0x32	; 50
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e2 e3       	ldi	r30, 0x32	; 50
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_u8SetPinValue+0x118>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_u8SetPinValue+0x114>
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	77 c0       	rjmp	.+238    	; 0xec2 <DIO_u8SetPinValue+0x210>
         default:;
		 }
	 }
	 else if(Copy_u8Value==DIO_LOW)
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	88 23       	and	r24, r24
     dd8:	09 f0       	breq	.+2      	; 0xddc <DIO_u8SetPinValue+0x12a>
     dda:	73 c0       	rjmp	.+230    	; 0xec2 <DIO_u8SetPinValue+0x210>
	 {
		 switch(Copy_u8Port)
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	3e 83       	std	Y+6, r19	; 0x06
     de4:	2d 83       	std	Y+5, r18	; 0x05
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	91 05       	cpc	r25, r1
     dee:	59 f1       	breq	.+86     	; 0xe46 <DIO_u8SetPinValue+0x194>
     df0:	2d 81       	ldd	r18, Y+5	; 0x05
     df2:	3e 81       	ldd	r19, Y+6	; 0x06
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	2c f4       	brge	.+10     	; 0xe04 <DIO_u8SetPinValue+0x152>
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f0       	breq	.+26     	; 0xe1c <DIO_u8SetPinValue+0x16a>
     e02:	5f c0       	rjmp	.+190    	; 0xec2 <DIO_u8SetPinValue+0x210>
     e04:	2d 81       	ldd	r18, Y+5	; 0x05
     e06:	3e 81       	ldd	r19, Y+6	; 0x06
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	89 f1       	breq	.+98     	; 0xe70 <DIO_u8SetPinValue+0x1be>
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <DIO_u8SetPinValue+0x168>
     e18:	40 c0       	rjmp	.+128    	; 0xe9a <DIO_u8SetPinValue+0x1e8>
     e1a:	53 c0       	rjmp	.+166    	; 0xec2 <DIO_u8SetPinValue+0x210>
		 		 {
		 case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
     e1c:	ab e3       	ldi	r26, 0x3B	; 59
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinValue+0x188>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinValue+0x184>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	3e c0       	rjmp	.+124    	; 0xec2 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
     e46:	a8 e3       	ldi	r26, 0x38	; 56
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e8 e3       	ldi	r30, 0x38	; 56
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_u8SetPinValue+0x1b2>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_u8SetPinValue+0x1ae>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	29 c0       	rjmp	.+82     	; 0xec2 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
     e70:	a5 e3       	ldi	r26, 0x35	; 53
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e5 e3       	ldi	r30, 0x35	; 53
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_u8SetPinValue+0x1dc>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_u8SetPinValue+0x1d8>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
     e9a:	a2 e3       	ldi	r26, 0x32	; 50
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_u8SetPinValue+0x206>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_u8SetPinValue+0x202>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
		 default:;
		 		 }
	 }
 }
 return Local_u8ErrorState;
     ec2:	99 81       	ldd	r25, Y+1	; 0x01
     ec4:	99 87       	std	Y+9, r25	; 0x09
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
}
     ec8:	29 96       	adiw	r28, 0x09	; 9
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <DIO_u8SetPortDir>:

u8 DIO_u8SetPortDir(u8 Copy_u8Port,u8 Copy_u8Direction)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DIO_u8SetPortDir+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <DIO_u8SetPortDir+0x8>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <DIO_u8SetPortDir+0xa>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	8a 83       	std	Y+2, r24	; 0x02
     eea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     eec:	19 82       	std	Y+1, r1	; 0x01
if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	28 f0       	brcs	.+10     	; 0xefe <DIO_u8SetPortDir+0x24>
{
	   Local_u8ErrorState=1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01
	  return Local_u8ErrorState;
     ef8:	29 81       	ldd	r18, Y+1	; 0x01
     efa:	2e 83       	std	Y+6, r18	; 0x06
     efc:	34 c0       	rjmp	.+104    	; 0xf66 <DIO_u8SetPortDir+0x8c>
}
else
{

     switch(Copy_u8Port)
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3d 83       	std	Y+5, r19	; 0x05
     f06:	2c 83       	std	Y+4, r18	; 0x04
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 05       	cpc	r25, r1
     f10:	d1 f0       	breq	.+52     	; 0xf46 <DIO_u8SetPortDir+0x6c>
     f12:	2c 81       	ldd	r18, Y+4	; 0x04
     f14:	3d 81       	ldd	r19, Y+5	; 0x05
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	31 05       	cpc	r19, r1
     f1a:	2c f4       	brge	.+10     	; 0xf26 <DIO_u8SetPortDir+0x4c>
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	61 f0       	breq	.+24     	; 0xf3c <DIO_u8SetPortDir+0x62>
     f24:	1e c0       	rjmp	.+60     	; 0xf62 <DIO_u8SetPortDir+0x88>
     f26:	2c 81       	ldd	r18, Y+4	; 0x04
     f28:	3d 81       	ldd	r19, Y+5	; 0x05
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	81 f0       	breq	.+32     	; 0xf50 <DIO_u8SetPortDir+0x76>
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	91 05       	cpc	r25, r1
     f38:	81 f0       	breq	.+32     	; 0xf5a <DIO_u8SetPortDir+0x80>
     f3a:	13 c0       	rjmp	.+38     	; 0xf62 <DIO_u8SetPortDir+0x88>
     {
     case DIO_PORTA:DDRA=Copy_u8Direction;break;
     f3c:	ea e3       	ldi	r30, 0x3A	; 58
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	80 83       	st	Z, r24
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <DIO_u8SetPortDir+0x88>
     case DIO_PORTB:DDRB=Copy_u8Direction;break;
     f46:	e7 e3       	ldi	r30, 0x37	; 55
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	80 83       	st	Z, r24
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <DIO_u8SetPortDir+0x88>
     case DIO_PORTC:DDRC=Copy_u8Direction;break;
     f50:	e4 e3       	ldi	r30, 0x34	; 52
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	80 83       	st	Z, r24
     f58:	04 c0       	rjmp	.+8      	; 0xf62 <DIO_u8SetPortDir+0x88>
     case DIO_PORTD:DDRD=Copy_u8Direction;break;
     f5a:	e1 e3       	ldi	r30, 0x31	; 49
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	80 83       	st	Z, r24




  }
return Local_u8ErrorState;
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
}
     f68:	26 96       	adiw	r28, 0x06	; 6
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DIO_u8SetPinDir>:


u8 DIO_u8SetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	29 97       	sbiw	r28, 0x09	; 9
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	6b 83       	std	Y+3, r22	; 0x03
     f92:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f94:	19 82       	std	Y+1, r1	; 0x01

	 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	84 30       	cpi	r24, 0x04	; 4
     f9a:	28 f0       	brcs	.+10     	; 0xfa6 <DIO_u8SetPinDir+0x2c>
	    {
	 	   Local_u8ErrorState=1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	89 83       	std	Y+1, r24	; 0x01
	 	  return Local_u8ErrorState;
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	29 87       	std	Y+9, r18	; 0x09
     fa4:	f4 c0       	rjmp	.+488    	; 0x118e <DIO_u8SetPinDir+0x214>
	    }
	 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	28 f0       	brcs	.+10     	; 0xfb6 <DIO_u8SetPinDir+0x3c>
	 {
		   Local_u8ErrorState=1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	89 83       	std	Y+1, r24	; 0x01
	       return Local_u8ErrorState;
     fb0:	39 81       	ldd	r19, Y+1	; 0x01
     fb2:	39 87       	std	Y+9, r19	; 0x09
     fb4:	ec c0       	rjmp	.+472    	; 0x118e <DIO_u8SetPinDir+0x214>
	 }
	 else
	 {
		 if(Copy_u8Direction==DIO_PIN_OUT)
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	09 f0       	breq	.+2      	; 0xfbe <DIO_u8SetPinDir+0x44>
     fbc:	6f c0       	rjmp	.+222    	; 0x109c <DIO_u8SetPinDir+0x122>
		 {
			switch(Copy_u8Port)
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	38 87       	std	Y+8, r19	; 0x08
     fc6:	2f 83       	std	Y+7, r18	; 0x07
     fc8:	8f 81       	ldd	r24, Y+7	; 0x07
     fca:	98 85       	ldd	r25, Y+8	; 0x08
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	49 f1       	breq	.+82     	; 0x1024 <DIO_u8SetPinDir+0xaa>
     fd2:	2f 81       	ldd	r18, Y+7	; 0x07
     fd4:	38 85       	ldd	r19, Y+8	; 0x08
     fd6:	22 30       	cpi	r18, 0x02	; 2
     fd8:	31 05       	cpc	r19, r1
     fda:	2c f4       	brge	.+10     	; 0xfe6 <DIO_u8SetPinDir+0x6c>
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	98 85       	ldd	r25, Y+8	; 0x08
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	61 f0       	breq	.+24     	; 0xffc <DIO_u8SetPinDir+0x82>
     fe4:	d2 c0       	rjmp	.+420    	; 0x118a <DIO_u8SetPinDir+0x210>
     fe6:	2f 81       	ldd	r18, Y+7	; 0x07
     fe8:	38 85       	ldd	r19, Y+8	; 0x08
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	71 f1       	breq	.+92     	; 0x104c <DIO_u8SetPinDir+0xd2>
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	91 05       	cpc	r25, r1
     ff8:	e9 f1       	breq	.+122    	; 0x1074 <DIO_u8SetPinDir+0xfa>
     ffa:	c7 c0       	rjmp	.+398    	; 0x118a <DIO_u8SetPinDir+0x210>
			{case DIO_PORTA:SET_BIT(DDRA,Copy_u8Pin);break;
     ffc:	aa e3       	ldi	r26, 0x3A	; 58
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_u8SetPinDir+0xa0>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_u8SetPinDir+0x9c>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	b3 c0       	rjmp	.+358    	; 0x118a <DIO_u8SetPinDir+0x210>
			case DIO_PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
    1024:	a7 e3       	ldi	r26, 0x37	; 55
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_u8SetPinDir+0xc8>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_u8SetPinDir+0xc4>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	9f c0       	rjmp	.+318    	; 0x118a <DIO_u8SetPinDir+0x210>
			case DIO_PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
    104c:	a4 e3       	ldi	r26, 0x34	; 52
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e4 e3       	ldi	r30, 0x34	; 52
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinDir+0xf0>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinDir+0xec>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	8b c0       	rjmp	.+278    	; 0x118a <DIO_u8SetPinDir+0x210>
			case DIO_PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
    1074:	a1 e3       	ldi	r26, 0x31	; 49
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e1 e3       	ldi	r30, 0x31	; 49
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_u8SetPinDir+0x118>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_u8SetPinDir+0x114>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	77 c0       	rjmp	.+238    	; 0x118a <DIO_u8SetPinDir+0x210>
			}
		 }
		 else if(Copy_u8Direction==DIO_PIN_IN)
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <DIO_u8SetPinDir+0x12a>
    10a2:	73 c0       	rjmp	.+230    	; 0x118a <DIO_u8SetPinDir+0x210>
		 {
			 switch(Copy_u8Port)
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3e 83       	std	Y+6, r19	; 0x06
    10ac:	2d 83       	std	Y+5, r18	; 0x05
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	59 f1       	breq	.+86     	; 0x110e <DIO_u8SetPinDir+0x194>
    10b8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ba:	3e 81       	ldd	r19, Y+6	; 0x06
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_u8SetPinDir+0x152>
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	69 f0       	breq	.+26     	; 0x10e4 <DIO_u8SetPinDir+0x16a>
    10ca:	5f c0       	rjmp	.+190    	; 0x118a <DIO_u8SetPinDir+0x210>
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	89 f1       	breq	.+98     	; 0x1138 <DIO_u8SetPinDir+0x1be>
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <DIO_u8SetPinDir+0x168>
    10e0:	40 c0       	rjmp	.+128    	; 0x1162 <DIO_u8SetPinDir+0x1e8>
    10e2:	53 c0       	rjmp	.+166    	; 0x118a <DIO_u8SetPinDir+0x210>
			{
		    case DIO_PORTA:CLR_BIT(DDRA,Copy_u8Pin);break;
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinDir+0x188>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinDir+0x184>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	3e c0       	rjmp	.+124    	; 0x118a <DIO_u8SetPinDir+0x210>
			case DIO_PORTB:CLR_BIT(DDRB,Copy_u8Pin);break;
    110e:	a7 e3       	ldi	r26, 0x37	; 55
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e3       	ldi	r30, 0x37	; 55
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_u8SetPinDir+0x1b2>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_u8SetPinDir+0x1ae>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	29 c0       	rjmp	.+82     	; 0x118a <DIO_u8SetPinDir+0x210>
			case DIO_PORTC:CLR_BIT(DDRC,Copy_u8Pin);break;
    1138:	a4 e3       	ldi	r26, 0x34	; 52
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8SetPinDir+0x1dc>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8SetPinDir+0x1d8>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	14 c0       	rjmp	.+40     	; 0x118a <DIO_u8SetPinDir+0x210>
			case DIO_PORTD:CLR_BIT(DDRD,Copy_u8Pin);break;
    1162:	a1 e3       	ldi	r26, 0x31	; 49
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e1 e3       	ldi	r30, 0x31	; 49
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_u8SetPinDir+0x206>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_u8SetPinDir+0x202>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
			}

		 }

	 }
return Local_u8ErrorState;
    118a:	99 81       	ldd	r25, Y+1	; 0x01
    118c:	99 87       	std	Y+9, r25	; 0x09
    118e:	89 85       	ldd	r24, Y+9	; 0x09
}
    1190:	29 96       	adiw	r28, 0x09	; 9
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8 *Copy_u8Value)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	27 97       	sbiw	r28, 0x07	; 7
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	7c 83       	std	Y+4, r23	; 0x04
    11ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    11bc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	28 f0       	brcs	.+10     	; 0x11ce <DIO_u8GetPortValue+0x2c>
	{
		   Local_u8ErrorState=1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
		  return Local_u8ErrorState;
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	2f 83       	std	Y+7, r18	; 0x07
    11cc:	3c c0       	rjmp	.+120    	; 0x1246 <DIO_u8GetPortValue+0xa4>
	}
	else
	{
		switch(Copy_u8Port)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3e 83       	std	Y+6, r19	; 0x06
    11d6:	2d 83       	std	Y+5, r18	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	e1 f0       	breq	.+56     	; 0x121a <DIO_u8GetPortValue+0x78>
    11e2:	2d 81       	ldd	r18, Y+5	; 0x05
    11e4:	3e 81       	ldd	r19, Y+6	; 0x06
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <DIO_u8GetPortValue+0x54>
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	61 f0       	breq	.+24     	; 0x120c <DIO_u8GetPortValue+0x6a>
    11f4:	26 c0       	rjmp	.+76     	; 0x1242 <DIO_u8GetPortValue+0xa0>
    11f6:	2d 81       	ldd	r18, Y+5	; 0x05
    11f8:	3e 81       	ldd	r19, Y+6	; 0x06
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <DIO_u8GetPortValue+0x86>
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	b1 f0       	breq	.+44     	; 0x1236 <DIO_u8GetPortValue+0x94>
    120a:	1b c0       	rjmp	.+54     	; 0x1242 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_PORTA:*Copy_u8Value=PINA;break;
    120c:	e9 e3       	ldi	r30, 0x39	; 57
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	eb 81       	ldd	r30, Y+3	; 0x03
    1214:	fc 81       	ldd	r31, Y+4	; 0x04
    1216:	80 83       	st	Z, r24
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTB:*Copy_u8Value=PINB;break;
    121a:	e6 e3       	ldi	r30, 0x36	; 54
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	eb 81       	ldd	r30, Y+3	; 0x03
    1222:	fc 81       	ldd	r31, Y+4	; 0x04
    1224:	80 83       	st	Z, r24
    1226:	0d c0       	rjmp	.+26     	; 0x1242 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTC:*Copy_u8Value=PINC;break;
    1228:	e3 e3       	ldi	r30, 0x33	; 51
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	eb 81       	ldd	r30, Y+3	; 0x03
    1230:	fc 81       	ldd	r31, Y+4	; 0x04
    1232:	80 83       	st	Z, r24
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTD:*Copy_u8Value=PIND;break;
    1236:	e0 e3       	ldi	r30, 0x30	; 48
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	eb 81       	ldd	r30, Y+3	; 0x03
    123e:	fc 81       	ldd	r31, Y+4	; 0x04
    1240:	80 83       	st	Z, r24
default:;

		}
	}
return Local_u8ErrorState;
    1242:	99 81       	ldd	r25, Y+1	; 0x01
    1244:	9f 83       	std	Y+7, r25	; 0x07
    1246:	8f 81       	ldd	r24, Y+7	; 0x07

}
    1248:	27 96       	adiw	r28, 0x07	; 7
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_u8Value)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	28 97       	sbiw	r28, 0x08	; 8
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	6b 83       	std	Y+3, r22	; 0x03
    1272:	5d 83       	std	Y+5, r21	; 0x05
    1274:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1276:	19 82       	std	Y+1, r1	; 0x01

		 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	28 f0       	brcs	.+10     	; 0x1288 <DIO_u8GetPinValue+0x2e>
		    {
		 	   Local_u8ErrorState=1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	89 83       	std	Y+1, r24	; 0x01
		 	  return Local_u8ErrorState;
    1282:	29 81       	ldd	r18, Y+1	; 0x01
    1284:	28 87       	std	Y+8, r18	; 0x08
    1286:	7a c0       	rjmp	.+244    	; 0x137c <DIO_u8GetPinValue+0x122>
		    }
		 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 30       	cpi	r24, 0x08	; 8
    128c:	28 f0       	brcs	.+10     	; 0x1298 <DIO_u8GetPinValue+0x3e>
		 {
			   Local_u8ErrorState=1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	89 83       	std	Y+1, r24	; 0x01
		       return Local_u8ErrorState;
    1292:	39 81       	ldd	r19, Y+1	; 0x01
    1294:	38 87       	std	Y+8, r19	; 0x08
    1296:	72 c0       	rjmp	.+228    	; 0x137c <DIO_u8GetPinValue+0x122>
		 }
		 else
		 {
			switch(Copy_u8Port)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	48 2f       	mov	r20, r24
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	5f 83       	std	Y+7, r21	; 0x07
    12a0:	4e 83       	std	Y+6, r20	; 0x06
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	59 f1       	breq	.+86     	; 0x1302 <DIO_u8GetPinValue+0xa8>
    12ac:	2e 81       	ldd	r18, Y+6	; 0x06
    12ae:	3f 81       	ldd	r19, Y+7	; 0x07
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <DIO_u8GetPinValue+0x68>
    12b6:	4e 81       	ldd	r20, Y+6	; 0x06
    12b8:	5f 81       	ldd	r21, Y+7	; 0x07
    12ba:	41 15       	cp	r20, r1
    12bc:	51 05       	cpc	r21, r1
    12be:	69 f0       	breq	.+26     	; 0x12da <DIO_u8GetPinValue+0x80>
    12c0:	5b c0       	rjmp	.+182    	; 0x1378 <DIO_u8GetPinValue+0x11e>
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	91 05       	cpc	r25, r1
    12ca:	79 f1       	breq	.+94     	; 0x132a <DIO_u8GetPinValue+0xd0>
    12cc:	2e 81       	ldd	r18, Y+6	; 0x06
    12ce:	3f 81       	ldd	r19, Y+7	; 0x07
    12d0:	23 30       	cpi	r18, 0x03	; 3
    12d2:	31 05       	cpc	r19, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_u8GetPinValue+0x7e>
    12d6:	3d c0       	rjmp	.+122    	; 0x1352 <DIO_u8GetPinValue+0xf8>
    12d8:	4f c0       	rjmp	.+158    	; 0x1378 <DIO_u8GetPinValue+0x11e>
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    12da:	e9 e3       	ldi	r30, 0x39	; 57
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_u8GetPinValue+0x98>
    12ee:	55 95       	asr	r21
    12f0:	47 95       	ror	r20
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_u8GetPinValue+0x94>
    12f6:	ca 01       	movw	r24, r20
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	ec 81       	ldd	r30, Y+4	; 0x04
    12fc:	fd 81       	ldd	r31, Y+5	; 0x05
    12fe:	80 83       	st	Z, r24
    1300:	3b c0       	rjmp	.+118    	; 0x1378 <DIO_u8GetPinValue+0x11e>
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1302:	e6 e3       	ldi	r30, 0x36	; 54
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_u8GetPinValue+0xc0>
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_u8GetPinValue+0xbc>
    131e:	ca 01       	movw	r24, r20
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	ec 81       	ldd	r30, Y+4	; 0x04
    1324:	fd 81       	ldd	r31, Y+5	; 0x05
    1326:	80 83       	st	Z, r24
    1328:	27 c0       	rjmp	.+78     	; 0x1378 <DIO_u8GetPinValue+0x11e>
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    132a:	e3 e3       	ldi	r30, 0x33	; 51
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_u8GetPinValue+0xe8>
    133e:	55 95       	asr	r21
    1340:	47 95       	ror	r20
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_u8GetPinValue+0xe4>
    1346:	ca 01       	movw	r24, r20
    1348:	81 70       	andi	r24, 0x01	; 1
    134a:	ec 81       	ldd	r30, Y+4	; 0x04
    134c:	fd 81       	ldd	r31, Y+5	; 0x05
    134e:	80 83       	st	Z, r24
    1350:	13 c0       	rjmp	.+38     	; 0x1378 <DIO_u8GetPinValue+0x11e>
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1352:	e0 e3       	ldi	r30, 0x30	; 48
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a9 01       	movw	r20, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_u8GetPinValue+0x110>
    1366:	55 95       	asr	r21
    1368:	47 95       	ror	r20
    136a:	8a 95       	dec	r24
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_u8GetPinValue+0x10c>
    136e:	ca 01       	movw	r24, r20
    1370:	81 70       	andi	r24, 0x01	; 1
    1372:	ec 81       	ldd	r30, Y+4	; 0x04
    1374:	fd 81       	ldd	r31, Y+5	; 0x05
    1376:	80 83       	st	Z, r24
			}
		 }
return Local_u8ErrorState;
    1378:	59 81       	ldd	r21, Y+1	; 0x01
    137a:	58 87       	std	Y+8, r21	; 0x08
    137c:	88 85       	ldd	r24, Y+8	; 0x08
}
    137e:	28 96       	adiw	r28, 0x08	; 8
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <GIE_voidEnable>:

#include "GIE_INTERFACE.h"
#include "GIE_REGISTER.h"

void GIE_voidEnable(void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1398:	af e5       	ldi	r26, 0x5F	; 95
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	ef e5       	ldi	r30, 0x5F	; 95
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	8c 93       	st	X, r24
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    13b4:	af e5       	ldi	r26, 0x5F	; 95
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ef e5       	ldi	r30, 0x5F	; 95
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 77       	andi	r24, 0x7F	; 127
    13c0:	8c 93       	st	X, r24

}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <LCD_voidSendCommand>:
#include "DIO_INTERFACE.h"
#include <util/delay.h>


void LCD_voidSendCommand(u8 copy_u8Command)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	2f 97       	sbiw	r28, 0x0f	; 15
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	8f 87       	std	Y+15, r24	; 0x0f
/*  DIRCTION OF LCD   */
DIO_u8SetPortDir(LCD_DATA_PORT,DIO_PIN_OUT);
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_u8SetPortDir>
/*   DIRCTION OF RS/RW/E   */
DIO_u8SetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_OUT);
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
DIO_u8SetPinDir(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_OUT);
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
DIO_u8SetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUT);
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	63 e0       	ldi	r22, 0x03	; 3
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>

/*Setting RS pin to low*/
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
/*Setting RW pin low for write*/
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
/*Set command data pins*/
DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Command);
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	6f 85       	ldd	r22, Y+15	; 0x0f
    141c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_u8SetPortValue>
/*Send Enable pulse*/
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	63 e0       	ldi	r22, 0x03	; 3
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e4       	ldi	r27, 0x40	; 64
    1432:	8b 87       	std	Y+11, r24	; 0x0b
    1434:	9c 87       	std	Y+12, r25	; 0x0c
    1436:	ad 87       	std	Y+13, r26	; 0x0d
    1438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	6b 85       	ldd	r22, Y+11	; 0x0b
    143c:	7c 85       	ldd	r23, Y+12	; 0x0c
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	9e 85       	ldd	r25, Y+14	; 0x0e
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4a e7       	ldi	r20, 0x7A	; 122
    1448:	53 e4       	ldi	r21, 0x43	; 67
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	a9 87       	std	Y+9, r26	; 0x09
    1458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <LCD_voidSendCommand+0xb4>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <LCD_voidSendCommand+0x132>
	else if (__tmp > 65535)
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <LCD_voidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	6b 85       	ldd	r22, Y+11	; 0x0b
    1496:	7c 85       	ldd	r23, Y+12	; 0x0c
    1498:	8d 85       	ldd	r24, Y+13	; 0x0d
    149a:	9e 85       	ldd	r25, Y+14	; 0x0e
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e2       	ldi	r20, 0x20	; 32
    14a2:	51 e4       	ldi	r21, 0x41	; 65
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <LCD_voidSendCommand+0x114>
    14be:	89 e1       	ldi	r24, 0x19	; 25
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <LCD_voidSendCommand+0x102>
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f7       	brne	.-38     	; 0x14be <LCD_voidSendCommand+0xf6>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <LCD_voidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_voidSendCommand+0x13e>
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	63 e0       	ldi	r22, 0x03	; 3
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
}
    1518:	2f 96       	adiw	r28, 0x0f	; 15
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <LCD_voidInit>:

void LCD_voidInit(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	2e 97       	sbiw	r28, 0x0e	; 14
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a0 e2       	ldi	r26, 0x20	; 32
    1544:	b2 e4       	ldi	r27, 0x42	; 66
    1546:	8b 87       	std	Y+11, r24	; 0x0b
    1548:	9c 87       	std	Y+12, r25	; 0x0c
    154a:	ad 87       	std	Y+13, r26	; 0x0d
    154c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1550:	7c 85       	ldd	r23, Y+12	; 0x0c
    1552:	8d 85       	ldd	r24, Y+13	; 0x0d
    1554:	9e 85       	ldd	r25, Y+14	; 0x0e
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	4a e7       	ldi	r20, 0x7A	; 122
    155c:	53 e4       	ldi	r21, 0x43	; 67
    155e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	8f 83       	std	Y+7, r24	; 0x07
    1568:	98 87       	std	Y+8, r25	; 0x08
    156a:	a9 87       	std	Y+9, r26	; 0x09
    156c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	2c f4       	brge	.+10     	; 0x1590 <LCD_voidInit+0x66>
		__ticks = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	3f c0       	rjmp	.+126    	; 0x160e <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	4f e7       	ldi	r20, 0x7F	; 127
    159e:	57 e4       	ldi	r21, 0x47	; 71
    15a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	4c f5       	brge	.+82     	; 0x15fa <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e2       	ldi	r20, 0x20	; 32
    15b6:	51 e4       	ldi	r21, 0x41	; 65
    15b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <LCD_voidInit+0xc6>
    15d2:	89 e1       	ldi	r24, 0x19	; 25
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9c 83       	std	Y+4, r25	; 0x04
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_voidInit+0xb4>
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <LCD_voidInit+0xa8>
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCD_voidInit+0xf0>
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
	/*Wait more that 40 ms*/
	_delay_ms(40);
	LCD_voidSendCommand(Fun_Enable);
    1622:	88 e3       	ldi	r24, 0x38	; 56
    1624:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidSendCommand>

	LCD_voidSendCommand(DISPLAY_ON_OF);
    1628:	8c e0       	ldi	r24, 0x0C	; 12
    162a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidSendCommand>

	LCD_voidSendCommand(DISPLAY_Clr);
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidSendCommand>



}
    1634:	2e 96       	adiw	r28, 0x0e	; 14
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <LCD_voidSendData>:


void LCD_voidSendData(u8 copy_u8Data)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	2f 97       	sbiw	r28, 0x0f	; 15
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	8f 87       	std	Y+15, r24	; 0x0f

	/*Setting RS pin to HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
	/*Setting RW pin low for write*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>

	/*Set data pins*/
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Data);
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	6f 85       	ldd	r22, Y+15	; 0x0f
    1674:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	63 e0       	ldi	r22, 0x03	; 3
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e0       	ldi	r26, 0x00	; 0
    1688:	b0 e4       	ldi	r27, 0x40	; 64
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	ad 87       	std	Y+13, r26	; 0x0d
    1690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a e7       	ldi	r20, 0x7A	; 122
    16a0:	53 e4       	ldi	r21, 0x43	; 67
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8f 83       	std	Y+7, r24	; 0x07
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	a9 87       	std	Y+9, r26	; 0x09
    16b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <LCD_voidSendData+0x8e>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LCD_voidSendData+0xee>
    1716:	89 e1       	ldi	r24, 0x19	; 25
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_voidSendData+0xdc>
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <LCD_voidSendData+0xd0>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_voidSendData+0x118>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	63 e0       	ldi	r22, 0x03	; 3
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>


}
    1770:	2f 96       	adiw	r28, 0x0f	; 15
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <LCD_voidSendString>:

void LCD_voidSendString(const char* Copy_u8String)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <LCD_voidSendString+0x6>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	9b 83       	std	Y+3, r25	; 0x03
    1790:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8Counter=0;
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <LCD_voidSendString+0x30>
while(Copy_u8String[Local_u8Counter]!='\0')
{
    LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	9b 81       	ldd	r25, Y+3	; 0x03
    17a0:	fc 01       	movw	r30, r24
    17a2:	e2 0f       	add	r30, r18
    17a4:	f3 1f       	adc	r31, r19
    17a6:	80 81       	ld	r24, Z
    17a8:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendData>
    Local_u8Counter++;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* Copy_u8String)
{
u8 Local_u8Counter=0;
while(Copy_u8String[Local_u8Counter]!='\0')
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	fc 01       	movw	r30, r24
    17be:	e2 0f       	add	r30, r18
    17c0:	f3 1f       	adc	r31, r19
    17c2:	80 81       	ld	r24, Z
    17c4:	88 23       	and	r24, r24
    17c6:	39 f7       	brne	.-50     	; 0x1796 <LCD_voidSendString+0x14>
{
    LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    Local_u8Counter++;
}

}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8Xposition,u8 Copy_u8Yposition)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <LCD_voidGoToXY+0x6>
    17da:	0f 92       	push	r0
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8a 83       	std	Y+2, r24	; 0x02
    17e2:	6b 83       	std	Y+3, r22	; 0x03
  u8 Local_u8Address;

  if(Copy_u8Xposition==0)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	88 23       	and	r24, r24
    17e8:	19 f4       	brne	.+6      	; 0x17f0 <LCD_voidGoToXY+0x1c>
  {
	  Local_u8Address=Copy_u8Yposition;
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <LCD_voidGoToXY+0x28>
  }
  else if(Copy_u8Xposition==1)
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	19 f4       	brne	.+6      	; 0x17fc <LCD_voidGoToXY+0x28>

  {
	  Local_u8Address=Copy_u8Yposition+0x40;
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	80 5c       	subi	r24, 0xC0	; 192
    17fa:	89 83       	std	Y+1, r24	; 0x01
  }

  LCD_voidSendCommand(Local_u8Address|(1<<7));
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	80 68       	ori	r24, 0x80	; 128
    1800:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidSendCommand>

  //LCD_voidSendCommand(SET_BIT(Local_u8Address,7));
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(u32 copy_u32Number)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	27 97       	sbiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	6c 83       	std	Y+4, r22	; 0x04
    1826:	7d 83       	std	Y+5, r23	; 0x05
    1828:	8e 83       	std	Y+6, r24	; 0x06
    182a:	9f 83       	std	Y+7, r25	; 0x07
	u8 Local_u8Digit;
	u8 Local_u8Counter1=0;
    182c:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8 Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8 Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	ae 81       	ldd	r26, Y+6	; 0x06
    1834:	bf 81       	ldd	r27, Y+7	; 0x07
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	a1 05       	cpc	r26, r1
    183a:	b1 05       	cpc	r27, r1
    183c:	b9 f5       	brne	.+110    	; 0x18ac <LCD_voidWriteNumber+0x9c>
	{
		LCD_voidSendData(Local_ArrayOfChar[0]);
    183e:	80 91 94 00 	lds	r24, 0x0094
    1842:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendData>
    1846:	4e c0       	rjmp	.+156    	; 0x18e4 <LCD_voidWriteNumber+0xd4>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	ae 81       	ldd	r26, Y+6	; 0x06
    184e:	bf 81       	ldd	r27, Y+7	; 0x07
    1850:	2a e0       	ldi	r18, 0x0A	; 10
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodsi4>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	ae 81       	ldd	r26, Y+6	; 0x06
    186c:	bf 81       	ldd	r27, Y+7	; 0x07
    186e:	2a e0       	ldi	r18, 0x0A	; 10
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodsi4>
    187e:	da 01       	movw	r26, r20
    1880:	c9 01       	movw	r24, r18
    1882:	8c 83       	std	Y+4, r24	; 0x04
    1884:	9d 83       	std	Y+5, r25	; 0x05
    1886:	ae 83       	std	Y+6, r26	; 0x06
    1888:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter1]=Local_ArrayOfChar[Local_u8Digit];
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	fc 01       	movw	r30, r24
    1898:	ec 56       	subi	r30, 0x6C	; 108
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	f9 01       	movw	r30, r18
    18a0:	e0 56       	subi	r30, 0x60	; 96
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
			Local_u8Counter1++;
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	ae 81       	ldd	r26, Y+6	; 0x06
    18b2:	bf 81       	ldd	r27, Y+7	; 0x07
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	a1 05       	cpc	r26, r1
    18b8:	b1 05       	cpc	r27, r1
    18ba:	31 f6       	brne	.-116    	; 0x1848 <LCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter1]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter1++;
		}

		for(Local_u8Counter2=Local_u8Counter1-1;Local_u8Counter2>=0;Local_u8Counter2--)
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	81 50       	subi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	0d c0       	rjmp	.+26     	; 0x18de <LCD_voidWriteNumber+0xce>
		{
			LCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	99 27       	eor	r25, r25
    18c8:	87 fd       	sbrc	r24, 7
    18ca:	90 95       	com	r25
    18cc:	fc 01       	movw	r30, r24
    18ce:	e0 56       	subi	r30, 0x60	; 96
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter1]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter1++;
		}

		for(Local_u8Counter2=Local_u8Counter1-1;Local_u8Counter2>=0;Local_u8Counter2--)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	81 50       	subi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	88 23       	and	r24, r24
    18e2:	84 f7       	brge	.-32     	; 0x18c4 <LCD_voidWriteNumber+0xb4>
		{
			LCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    18e4:	27 96       	adiw	r28, 0x07	; 7
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <LCD_voidClearScreen>:

void LCD_voidClearScreen(void){
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(DISPLAY_Clr);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_voidSendCommand>
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <TEMP_u8Read>:
#include "ADC_interface.h"
#include "LM35.h"


u8 TEMP_u8Read(u8 Copy_u8Channel)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <TEMP_u8Read+0x6>
    1910:	00 d0       	rcall	.+0      	; 0x1912 <TEMP_u8Read+0x8>
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8d 83       	std	Y+5, r24	; 0x05
    u8 Local_u16Value = ADC_u8GetChannelReading(Copy_u8Channel);
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8GetChannelReading>
    1920:	8c 83       	std	Y+4, r24	; 0x04

    // Convert ADC value to millivolts
    u16 MilliVolt = (u16)(((u32)Local_u16Value * 5000UL) /255UL);
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	28 e8       	ldi	r18, 0x88	; 136
    192e:	33 e1       	ldi	r19, 0x13	; 19
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsi3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	2f ef       	ldi	r18, 0xFF	; 255
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodsi4>
    1950:	da 01       	movw	r26, r20
    1952:	c9 01       	movw	r24, r18
    1954:	9b 83       	std	Y+3, r25	; 0x03
    1956:	8a 83       	std	Y+2, r24	; 0x02

    // Convert millivolts to Celsius
    u8 Local_u8Temp = (u8)(MilliVolt / 10);
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	2a e0       	ldi	r18, 0x0A	; 10
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	b9 01       	movw	r22, r18
    1962:	0e 94 15 12 	call	0x242a	; 0x242a <__udivmodhi4>
    1966:	cb 01       	movw	r24, r22
    1968:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8Temp;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <SPI_voidINITMaster>:
#include"SPI_REGISTER.h"
#include"SPI_INTERFACE.h"


void  SPI_voidINITMaster(void)
{      /*Master DIRECTION*/
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	    DIO_u8SetPinDir(DIO_PORTB,DIO_PIN4,DIO_PIN_IN);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	64 e0       	ldi	r22, 0x04	; 4
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	64 e0       	ldi	r22, 0x04	; 4
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
		DIO_u8SetPinDir(DIO_PORTB,DIO_PIN5,DIO_PIN_OUT);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	65 e0       	ldi	r22, 0x05	; 5
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_IN);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	66 e0       	ldi	r22, 0x06	; 6
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_OUT);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	67 e0       	ldi	r22, 0x07	; 7
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
	/* Master Initialization */
	   SET_BIT(SPCR,SPCR_MSTR);
    19b6:	ad e2       	ldi	r26, 0x2D	; 45
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ed e2       	ldi	r30, 0x2D	; 45
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 61       	ori	r24, 0x10	; 16
    19c2:	8c 93       	st	X, r24

    /*Set Prescaler Devision Factor: Div_By_16*/
	   SET_BIT(SPCR,SPCR_SPR0);
    19c4:	ad e2       	ldi	r26, 0x2D	; 45
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ed e2       	ldi	r30, 0x2D	; 45
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	81 60       	ori	r24, 0x01	; 1
    19d0:	8c 93       	st	X, r24
	   CLR_BIT(SPCR,SPCR_SPR1);
    19d2:	ad e2       	ldi	r26, 0x2D	; 45
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ed e2       	ldi	r30, 0x2D	; 45
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8d 7f       	andi	r24, 0xFD	; 253
    19de:	8c 93       	st	X, r24
	   CLR_BIT(SPSR,SPSR_SPI2X);
    19e0:	ae e2       	ldi	r26, 0x2E	; 46
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ee e2       	ldi	r30, 0x2E	; 46
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8e 7f       	andi	r24, 0xFE	; 254
    19ec:	8c 93       	st	X, r24

	/* Set SPI Enable State*/
	   SET_BIT(SPCR,SPCR_SPE);
    19ee:	ad e2       	ldi	r26, 0x2D	; 45
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ed e2       	ldi	r30, 0x2D	; 45
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	8c 93       	st	X, r24

}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <SPI_voidINITSlave>:

void  SPI_voidINITSlave(void)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	/** Slave Direction**/
	        DIO_u8SetPinDir(DIO_PORTB,DIO_PIN4,DIO_PIN_IN);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	64 e0       	ldi	r22, 0x04	; 4
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTB,DIO_PIN5,DIO_PIN_IN);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	65 e0       	ldi	r22, 0x05	; 5
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_OUT);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	66 e0       	ldi	r22, 0x06	; 6
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_IN);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	67 e0       	ldi	r22, 0x07	; 7
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTA,DIO_PIN0,DIO_PIN_OUT);
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>

	/* Slave Initialization */
	   CLR_BIT(SPCR,SPCR_MSTR);
    1a3c:	ad e2       	ldi	r26, 0x2D	; 45
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	ed e2       	ldi	r30, 0x2D	; 45
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	8f 7e       	andi	r24, 0xEF	; 239
    1a48:	8c 93       	st	X, r24

    /* Set SPI Enable State*/
	   SET_BIT(SPCR,SPCR_SPE);
    1a4a:	ad e2       	ldi	r26, 0x2D	; 45
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ed e2       	ldi	r30, 0x2D	; 45
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 64       	ori	r24, 0x40	; 64
    1a56:	8c 93       	st	X, r24

}
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <SPI_u8Transceive>:

u8   SPI_u8Transceive(u8  Copy_u8Data)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
	/*Sending The Data*/
        SPDR = Copy_u8Data;
    1a6a:	ef e2       	ldi	r30, 0x2F	; 47
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	80 83       	st	Z, r24

    /*Busy Waiting Until Complete Transfer */
       while(GET_BIT(SPSR,SPSR_SPIF)==0);
    1a72:	ee e2       	ldi	r30, 0x2E	; 46
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	88 23       	and	r24, r24
    1a7a:	dc f7       	brge	.-10     	; 0x1a72 <SPI_u8Transceive+0x14>

   /*Get The Exchanged Data*/
       return SPDR;
    1a7c:	ef e2       	ldi	r30, 0x2F	; 47
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
}
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <spi_transmit>:

void spi_transmit(u8 val)
{SPDR=val;
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	ef e2       	ldi	r30, 0x2F	; 47
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPSR_SPIF)==0){}
    1a9e:	ee e2       	ldi	r30, 0x2E	; 46
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 23       	and	r24, r24
    1aa6:	dc f7       	brge	.-10     	; 0x1a9e <spi_transmit+0x14>

}
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <spi_receive>:
u8 spi_receive()
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,SPSR_SPIF)==0){}
    1ab8:	ee e2       	ldi	r30, 0x2E	; 46
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	dc f7       	brge	.-10     	; 0x1ab8 <spi_receive+0x8>
		return SPDR;
    1ac2:	ef e2       	ldi	r30, 0x2F	; 47
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <TIMER0_voidINIT>:

static void (*TIMER0_pvCallBackFunc)(void)=NULL;


void  TIMER0_voidINIT(void)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
	/*CTC Mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1ad6:	a3 e5       	ldi	r26, 0x53	; 83
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e3 e5       	ldi	r30, 0x53	; 83
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 7b       	andi	r24, 0xBF	; 191
    1ae2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1ae4:	a3 e5       	ldi	r26, 0x53	; 83
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e3 e5       	ldi	r30, 0x53	; 83
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 60       	ori	r24, 0x08	; 8
    1af0:	8c 93       	st	X, r24

	/*Output Compare Match Interrupt Enable*/
     SET_BIT(TIMSK,TIMSK_OCIE0);
    1af2:	a9 e5       	ldi	r26, 0x59	; 89
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e9 e5       	ldi	r30, 0x59	; 89
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	82 60       	ori	r24, 0x02	; 2
    1afe:	8c 93       	st	X, r24

     /*Set Compare Match Value to 250 (1sec)*/
     OCR0=250;
    1b00:	ec e5       	ldi	r30, 0x5C	; 92
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a ef       	ldi	r24, 0xFA	; 250
    1b06:	80 83       	st	Z, r24

     /*Prescaler: Devision By 8*/
     CLR_BIT(TCCR0,TCCR0_CS00);
    1b08:	a3 e5       	ldi	r26, 0x53	; 83
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e3 e5       	ldi	r30, 0x53	; 83
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	8c 93       	st	X, r24
     SET_BIT(TCCR0,TCCR0_CS01);
    1b16:	a3 e5       	ldi	r26, 0x53	; 83
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e3 e5       	ldi	r30, 0x53	; 83
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	82 60       	ori	r24, 0x02	; 2
    1b22:	8c 93       	st	X, r24
     CLR_BIT(TCCR0,TCCR0_CS02);
    1b24:	a3 e5       	ldi	r26, 0x53	; 83
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e3 e5       	ldi	r30, 0x53	; 83
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	8c 93       	st	X, r24

}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <TIMER0_u8SetCallBack>:

u8   TIMER0_u8SetCallBack(u8  (*copy_pvCallBackFunc)(void))
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <TIMER0_u8SetCallBack+0x6>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9b 83       	std	Y+3, r25	; 0x03
    1b46:	8a 83       	std	Y+2, r24	; 0x02
    u8  Local_u8errorStatus = ok;
    1b48:	19 82       	std	Y+1, r1	; 0x01

    if(copy_pvCallBackFunc!=NULL)
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <TIMER0_u8SetCallBack+0x28>
    {
    	TIMER0_pvCallBackFunc=copy_pvCallBackFunc;
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	90 93 ab 00 	sts	0x00AB, r25
    1b5a:	80 93 aa 00 	sts	0x00AA, r24
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <TIMER0_u8SetCallBack+0x2c>
    }
    else
    {
    	Local_u8errorStatus=Nok;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8errorStatus;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL)
    1b9c:	80 91 aa 00 	lds	r24, 0x00AA
    1ba0:	90 91 ab 00 	lds	r25, 0x00AB
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	29 f0       	breq	.+10     	; 0x1bb2 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    1ba8:	e0 91 aa 00 	lds	r30, 0x00AA
    1bac:	f0 91 ab 00 	lds	r31, 0x00AB
    1bb0:	09 95       	icall
	}
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	bf 91       	pop	r27
    1bbc:	af 91       	pop	r26
    1bbe:	9f 91       	pop	r25
    1bc0:	8f 91       	pop	r24
    1bc2:	7f 91       	pop	r23
    1bc4:	6f 91       	pop	r22
    1bc6:	5f 91       	pop	r21
    1bc8:	4f 91       	pop	r20
    1bca:	3f 91       	pop	r19
    1bcc:	2f 91       	pop	r18
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <TWI_voidMasterInit>:
#include "BIT_MATH.h"
#include "TWI_interface.h"
#include <avr/io.h>

void TWI_voidMasterInit(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	/*SCL CLOCK*/
TWBR =255;
    1be0:	e0 e2       	ldi	r30, 0x20	; 32
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8f ef       	ldi	r24, 0xFF	; 255
    1be6:	80 83       	st	Z, r24
CLR_BIT(TWSR,TWPS0);
    1be8:	a1 e2       	ldi	r26, 0x21	; 33
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e1 e2       	ldi	r30, 0x21	; 33
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8e 7f       	andi	r24, 0xFE	; 254
    1bf4:	8c 93       	st	X, r24
CLR_BIT(TWSR,TWPS1);
    1bf6:	a1 e2       	ldi	r26, 0x21	; 33
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e1 e2       	ldi	r30, 0x21	; 33
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8d 7f       	andi	r24, 0xFD	; 253
    1c02:	8c 93       	st	X, r24
/*ENABLE*/
TWCR=(1<<TWEN);
    1c04:	e6 e5       	ldi	r30, 0x56	; 86
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	84 e0       	ldi	r24, 0x04	; 4
    1c0a:	80 83       	st	Z, r24
}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <TWI_voidStartCondition>:
void TWI_voidStartCondition(void)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
    1c1a:	e6 e5       	ldi	r30, 0x56	; 86
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	84 ea       	ldi	r24, 0xA4	; 164
    1c20:	80 83       	st	Z, r24
while(GET_BIT(TWCR,TWINT)==0);
    1c22:	e6 e5       	ldi	r30, 0x56	; 86
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 23       	and	r24, r24
    1c2a:	dc f7       	brge	.-10     	; 0x1c22 <TWI_voidStartCondition+0x10>
}
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <TWI_voidStopCondition>:
void TWI_voidStopCondition(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
    1c3a:	e6 e5       	ldi	r30, 0x56	; 86
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	84 e9       	ldi	r24, 0x94	; 148
    1c40:	80 83       	st	Z, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <TWI_voidSendData>:
void TWI_voidSendData(u8 Copy_u8Data)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
TWDR=Copy_u8Data;
    1c54:	e3 e2       	ldi	r30, 0x23	; 35
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	80 83       	st	Z, r24
TWCR=(1<<TWEN)|(1<<TWINT);
    1c5c:	e6 e5       	ldi	r30, 0x56	; 86
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	84 e8       	ldi	r24, 0x84	; 132
    1c62:	80 83       	st	Z, r24
while(GET_BIT(TWCR,TWINT)==0);
    1c64:	e6 e5       	ldi	r30, 0x56	; 86
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 23       	and	r24, r24
    1c6c:	dc f7       	brge	.-10     	; 0x1c64 <TWI_voidSendData+0x1c>
}
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <TWI_u8ReceiveData>:
u8 TWI_u8ReceiveData(void)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);
    1c7e:	e6 e5       	ldi	r30, 0x56	; 86
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	84 e8       	ldi	r24, 0x84	; 132
    1c84:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,TWINT)==0);
    1c86:	e6 e5       	ldi	r30, 0x56	; 86
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 23       	and	r24, r24
    1c8e:	dc f7       	brge	.-10     	; 0x1c86 <TWI_u8ReceiveData+0x10>
return TWDR;
    1c90:	e3 e2       	ldi	r30, 0x23	; 35
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <main>:
#include <util/delay.h>
#include "LCD_INTERFACE.h"
void ISR(void);

int main()
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	61 97       	sbiw	r28, 0x11	; 17
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    1cb0:	0e 94 95 0a 	call	0x152a	; 0x152a <LCD_voidInit>
	ADC_voidInit();
    1cb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	TIMER0_voidINIT();
    1cb8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <TIMER0_voidINIT>
	TIMER0_u8SetCallBack(&ISR);
    1cbc:	8c e0       	ldi	r24, 0x0C	; 12
    1cbe:	9f e0       	ldi	r25, 0x0F	; 15
    1cc0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <TIMER0_u8SetCallBack>
	GIE_voidEnable();
    1cc4:	0e 94 c8 09 	call	0x1390	; 0x1390 <GIE_voidEnable>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	aa e7       	ldi	r26, 0x7A	; 122
    1cce:	b4 e4       	ldi	r27, 0x44	; 68
    1cd0:	8b 87       	std	Y+11, r24	; 0x0b
    1cd2:	9c 87       	std	Y+12, r25	; 0x0c
    1cd4:	ad 87       	std	Y+13, r26	; 0x0d
    1cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a e7       	ldi	r20, 0x7A	; 122
    1ce6:	53 e4       	ldi	r21, 0x43	; 67
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8f 83       	std	Y+7, r24	; 0x07
    1cf2:	98 87       	std	Y+8, r25	; 0x08
    1cf4:	a9 87       	std	Y+9, r26	; 0x09
    1cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfa:	78 85       	ldd	r23, Y+8	; 0x08
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <main+0x7e>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <main+0xfc>
	else if (__tmp > 65535)
    1d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1c:	78 85       	ldd	r23, Y+8	; 0x08
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	4c f5       	brge	.+82     	; 0x1d84 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	8d 83       	std	Y+5, r24	; 0x05
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <main+0xde>
    1d5c:	89 e1       	ldi	r24, 0x19	; 25
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9c 83       	std	Y+4, r25	; 0x04
    1d62:	8b 83       	std	Y+3, r24	; 0x03
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <main+0xcc>
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <main+0xc0>
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <main+0x108>
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
{
	_delay_ms(1000);
	u8 Local_u8ReceiveRoom;
	u8 Local_u8ReceiveComp;
	u8 Local_u8RecieveStatus;
	SPI_voidINITSlave();
    1dac:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <SPI_voidINITSlave>

	  Local_u8ReceiveRoom = spi_receive();
    1db0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <spi_receive>
    1db4:	89 8b       	std	Y+17, r24	; 0x11

   	Local_u8ReceiveComp= spi_receive();
    1db6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <spi_receive>
    1dba:	88 8b       	std	Y+16, r24	; 0x10


	if (Local_u8ReceiveComp=='1')
    1dbc:	88 89       	ldd	r24, Y+16	; 0x10
    1dbe:	81 33       	cpi	r24, 0x31	; 49
    1dc0:	61 f4       	brne	.+24     	; 0x1dda <main+0x13e>
	{
            GET_STATUS(Local_u8ReceiveRoom,Local_u8ReceiveComp);
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	68 89       	ldd	r22, Y+16	; 0x10
    1dc6:	0e 94 44 10 	call	0x2088	; 0x2088 <GET_STATUS>
		Local_u8RecieveStatus= spi_receive();
    1dca:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <spi_receive>
    1dce:	8f 87       	std	Y+15, r24	; 0x0f
		LED(Local_u8ReceiveRoom ,Local_u8RecieveStatus );
    1dd0:	89 89       	ldd	r24, Y+17	; 0x11
    1dd2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dd4:	0e 94 b9 10 	call	0x2172	; 0x2172 <LED>
    1dd8:	77 cf       	rjmp	.-274    	; 0x1cc8 <main+0x2c>
	}

	else if (Local_u8ReceiveComp=='2')
    1dda:	88 89       	ldd	r24, Y+16	; 0x10
    1ddc:	82 33       	cpi	r24, 0x32	; 50
    1dde:	61 f4       	brne	.+24     	; 0x1df8 <main+0x15c>
	{
        GET_STATUS(Local_u8ReceiveRoom,Local_u8ReceiveComp);
    1de0:	89 89       	ldd	r24, Y+17	; 0x11
    1de2:	68 89       	ldd	r22, Y+16	; 0x10
    1de4:	0e 94 44 10 	call	0x2088	; 0x2088 <GET_STATUS>

		Local_u8RecieveStatus= spi_receive();
    1de8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <spi_receive>
    1dec:	8f 87       	std	Y+15, r24	; 0x0f
		AC(Local_u8ReceiveRoom ,Local_u8RecieveStatus );
    1dee:	89 89       	ldd	r24, Y+17	; 0x11
    1df0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1df2:	0e 94 4b 11 	call	0x2296	; 0x2296 <AC>
    1df6:	68 cf       	rjmp	.-304    	; 0x1cc8 <main+0x2c>
	}
	else if (Local_u8ReceiveComp=='3')
    1df8:	88 89       	ldd	r24, Y+16	; 0x10
    1dfa:	83 33       	cpi	r24, 0x33	; 51
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <main+0x164>
    1dfe:	64 cf       	rjmp	.-312    	; 0x1cc8 <main+0x2c>
	{
        GET_STATUS(Local_u8ReceiveRoom,Local_u8ReceiveComp);
    1e00:	89 89       	ldd	r24, Y+17	; 0x11
    1e02:	68 89       	ldd	r22, Y+16	; 0x10
    1e04:	0e 94 44 10 	call	0x2088	; 0x2088 <GET_STATUS>

		Local_u8RecieveStatus= spi_receive();
    1e08:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <spi_receive>
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
		TV(Local_u8ReceiveRoom ,Local_u8RecieveStatus );
    1e0e:	89 89       	ldd	r24, Y+17	; 0x11
    1e10:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e12:	0e 94 02 11 	call	0x2204	; 0x2204 <TV>
    1e16:	58 cf       	rjmp	.-336    	; 0x1cc8 <main+0x2c>

00001e18 <ISR>:
}
}


void ISR(void)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	2f 97       	sbiw	r28, 0x0f	; 15
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    static u16 counter=0;
    counter++;
    1e2c:	80 91 ac 00 	lds	r24, 0x00AC
    1e30:	90 91 ad 00 	lds	r25, 0x00AD
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	90 93 ad 00 	sts	0x00AD, r25
    1e3a:	80 93 ac 00 	sts	0x00AC, r24

    if(counter==1000)
    1e3e:	80 91 ac 00 	lds	r24, 0x00AC
    1e42:	90 91 ad 00 	lds	r25, 0x00AD
    1e46:	23 e0       	ldi	r18, 0x03	; 3
    1e48:	88 3e       	cpi	r24, 0xE8	; 232
    1e4a:	92 07       	cpc	r25, r18
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <ISR+0x38>
    1e4e:	e9 c0       	rjmp	.+466    	; 0x2022 <ISR+0x20a>
    {
    	u8 Temp;
    	Temp=LM35();
    1e50:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LM35>
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
    	if(Temp<50)
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	82 33       	cpi	r24, 0x32	; 50
    1e5a:	98 f5       	brcc	.+102    	; 0x1ec2 <ISR+0xaa>
		{
            DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_LOW);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>

    		DIO_u8SetPinDir(DIO_PORTA,DIO_PIN6,DIO_PIN_OUT);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
    		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	66 e0       	ldi	r22, 0x06	; 6
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    		DIO_u8SetPinDir(DIO_PORTA,DIO_PIN7,DIO_PIN_OUT);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	67 e0       	ldi	r22, 0x07	; 7
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
    		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	67 e0       	ldi	r22, 0x07	; 7
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    		 LCD_voidClearScreen();
    1e8e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <LCD_voidClearScreen>
    		 LCD_voidGoToXY(0,0);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_voidGoToXY>
    		 LCD_voidSendString("Temperature= ");
    1e9a:	80 e6       	ldi	r24, 0x60	; 96
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidSendString>
    		 LCD_voidWriteNumber(Temp+1);
    1ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	aa 27       	eor	r26, r26
    1eac:	97 fd       	sbrc	r25, 7
    1eae:	a0 95       	com	r26
    1eb0:	ba 2f       	mov	r27, r26
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_voidWriteNumber>
    		 LCD_voidSendData('c');
    1eba:	83 e6       	ldi	r24, 0x63	; 99
    1ebc:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendData>
    1ec0:	b0 c0       	rjmp	.+352    	; 0x2022 <ISR+0x20a>
		}
    	else if(Temp>=50)
    1ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec4:	82 33       	cpi	r24, 0x32	; 50
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <ISR+0xb2>
    1ec8:	ac c0       	rjmp	.+344    	; 0x2022 <ISR+0x20a>
    	{
    		DIO_u8SetPinDir(DIO_PORTA,DIO_PIN7,DIO_PIN_OUT);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	67 e0       	ldi	r22, 0x07	; 7
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
    		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	67 e0       	ldi	r22, 0x07	; 7
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    		DIO_u8SetPinDir(DIO_PORTA,DIO_PIN6,DIO_PIN_OUT);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	66 e0       	ldi	r22, 0x06	; 6
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
    		DIO_u8SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	66 e0       	ldi	r22, 0x06	; 6
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    		//DIO_u8SetPinDir(DIO_PORTB,DIO_PIN0,DIO_PIN_IN);




    					            DIO_u8SetPinDir(DIO_PORTB, DIO_PIN0, DIO_PIN_OUT);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
    					            DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_HIGH);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>


    		 LCD_voidClearScreen();
    1f06:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <LCD_voidClearScreen>
    		 LCD_voidGoToXY(0,5);
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	65 e0       	ldi	r22, 0x05	; 5
    1f0e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_voidGoToXY>
    		 LCD_voidSendString("WARNING");
    1f12:	8e e6       	ldi	r24, 0x6E	; 110
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidSendString>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	af e2       	ldi	r26, 0x2F	; 47
    1f20:	b4 e4       	ldi	r27, 0x44	; 68
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
    1f24:	9c 87       	std	Y+12, r25	; 0x0c
    1f26:	ad 87       	std	Y+13, r26	; 0x0d
    1f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	53 e4       	ldi	r21, 0x43	; 67
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8f 83       	std	Y+7, r24	; 0x07
    1f44:	98 87       	std	Y+8, r25	; 0x08
    1f46:	a9 87       	std	Y+9, r26	; 0x09
    1f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <ISR+0x154>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <ISR+0x1d2>
	else if (__tmp > 65535)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <ISR+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <ISR+0x1b4>
    1fae:	89 e1       	ldi	r24, 0x19	; 25
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <ISR+0x1a2>
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <ISR+0x196>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <ISR+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <ISR+0x1de>
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    		 _delay_ms(700);
    		 LCD_voidClearScreen();
    1ffe:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <LCD_voidClearScreen>
    		 LCD_voidGoToXY(0,3);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	63 e0       	ldi	r22, 0x03	; 3
    2006:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_voidGoToXY>
    		 LCD_voidSendString("TEMPERATURE");
    200a:	86 e7       	ldi	r24, 0x76	; 118
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidSendString>
    		 LCD_voidGoToXY(1,4);
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	64 e0       	ldi	r22, 0x04	; 4
    2016:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_voidGoToXY>
    		 LCD_voidSendString("INCREASED");
    201a:	82 e8       	ldi	r24, 0x82	; 130
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidSendString>
    	}

    }
}
    2022:	2f 96       	adiw	r28, 0x0f	; 15
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <clockwise>:
#include "DIO_INTERFACE.h"
#include <avr/io.h>
#include <util/delay.h>
#include "motor.h"
void clockwise()
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(motorport,motorpin1,DIO_HIGH);
    203c:	eb e3       	ldi	r30, 0x3B	; 59
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	64 e0       	ldi	r22, 0x04	; 4
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(motorport,motorpin2,DIO_LOW);
    204a:	eb e3       	ldi	r30, 0x3B	; 59
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	65 e0       	ldi	r22, 0x05	; 5
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>

}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <anticlock>:
void anticlock()
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(motorport,motorpin1,DIO_LOW);
    2066:	eb e3       	ldi	r30, 0x3B	; 59
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	64 e0       	ldi	r22, 0x04	; 4
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(motorport,motorpin2,DIO_HIGH);
    2074:	eb e3       	ldi	r30, 0x3B	; 59
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	65 e0       	ldi	r22, 0x05	; 5
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <GET_STATUS>:
#include"LCD_INTERFACE.h"
#include"ADC_interface.h"
#include"options.h"

void GET_STATUS(u8  Copy_u8ROOM,u8 Local_u8ReceiveComp)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <GET_STATUS+0x6>
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	6b 83       	std	Y+3, r22	; 0x03
	static u8 Status=1;
	 u8 Local_u8Status=0;
    2098:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ROOM=='1')
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	81 33       	cpi	r24, 0x31	; 49
    209e:	71 f5       	brne	.+92     	; 0x20fc <GET_STATUS+0x74>
	{
		if(Local_u8ReceiveComp=='1')
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	81 33       	cpi	r24, 0x31	; 49
    20a4:	61 f4       	brne	.+24     	; 0x20be <GET_STATUS+0x36>
		{
			DIO_u8GetPinValue(DIO_PORTC,DIO_PIN0,&Status);
    20a6:	2e e9       	ldi	r18, 0x9E	; 158
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	a9 01       	movw	r20, r18
    20b0:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_u8GetPinValue>
				SPI_u8Transceive(Status);
    20b4:	80 91 9e 00 	lds	r24, 0x009E
    20b8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <SPI_u8Transceive>
    20bc:	1f c0       	rjmp	.+62     	; 0x20fc <GET_STATUS+0x74>

		}
		else if(Local_u8ReceiveComp=='2')
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	82 33       	cpi	r24, 0x32	; 50
    20c2:	69 f4       	brne	.+26     	; 0x20de <GET_STATUS+0x56>
		{
			Local_u8Status=DIO_u8GetPinValue(DIO_PORTC,DIO_PIN2,&Status);
    20c4:	2e e9       	ldi	r18, 0x9E	; 158
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	62 e0       	ldi	r22, 0x02	; 2
    20cc:	a9 01       	movw	r20, r18
    20ce:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_u8GetPinValue>
    20d2:	89 83       	std	Y+1, r24	; 0x01
			SPI_u8Transceive(Status);
    20d4:	80 91 9e 00 	lds	r24, 0x009E
    20d8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <SPI_u8Transceive>
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <GET_STATUS+0x74>
		}
		else if(Local_u8ReceiveComp=='3')
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	83 33       	cpi	r24, 0x33	; 51
    20e2:	61 f4       	brne	.+24     	; 0x20fc <GET_STATUS+0x74>
		{
			Local_u8Status=DIO_u8GetPinValue(DIO_PORTC,DIO_PIN1,&Status);
    20e4:	2e e9       	ldi	r18, 0x9E	; 158
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	a9 01       	movw	r20, r18
    20ee:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_u8GetPinValue>
    20f2:	89 83       	std	Y+1, r24	; 0x01
			SPI_u8Transceive(Status);
    20f4:	80 91 9e 00 	lds	r24, 0x009E
    20f8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <SPI_u8Transceive>
		}
	}
	if(Copy_u8ROOM=='2')
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	82 33       	cpi	r24, 0x32	; 50
    2100:	91 f5       	brne	.+100    	; 0x2166 <GET_STATUS+0xde>
	{
		if(Local_u8ReceiveComp=='1')
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	81 33       	cpi	r24, 0x31	; 49
    2106:	71 f4       	brne	.+28     	; 0x2124 <GET_STATUS+0x9c>
		{
			Status=DIO_u8GetPinValue(DIO_PORTC,DIO_PIN3,&Status);
    2108:	2e e9       	ldi	r18, 0x9E	; 158
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	63 e0       	ldi	r22, 0x03	; 3
    2110:	a9 01       	movw	r20, r18
    2112:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_u8GetPinValue>
    2116:	80 93 9e 00 	sts	0x009E, r24
			SPI_u8Transceive(Status);
    211a:	80 91 9e 00 	lds	r24, 0x009E
    211e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <SPI_u8Transceive>
    2122:	21 c0       	rjmp	.+66     	; 0x2166 <GET_STATUS+0xde>
		}
		else if(Local_u8ReceiveComp=='2')
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	82 33       	cpi	r24, 0x32	; 50
    2128:	71 f4       	brne	.+28     	; 0x2146 <GET_STATUS+0xbe>
		{
			Status=DIO_u8GetPinValue(DIO_PORTC,DIO_PIN5,&Status);
    212a:	2e e9       	ldi	r18, 0x9E	; 158
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	65 e0       	ldi	r22, 0x05	; 5
    2132:	a9 01       	movw	r20, r18
    2134:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_u8GetPinValue>
    2138:	80 93 9e 00 	sts	0x009E, r24
			SPI_u8Transceive(Status);
    213c:	80 91 9e 00 	lds	r24, 0x009E
    2140:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <SPI_u8Transceive>
    2144:	10 c0       	rjmp	.+32     	; 0x2166 <GET_STATUS+0xde>
		}
		else if(Local_u8ReceiveComp=='3')
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	83 33       	cpi	r24, 0x33	; 51
    214a:	69 f4       	brne	.+26     	; 0x2166 <GET_STATUS+0xde>
		{
			Status=DIO_u8GetPinValue(DIO_PORTC,DIO_PIN4,&Status);
    214c:	2e e9       	ldi	r18, 0x9E	; 158
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	64 e0       	ldi	r22, 0x04	; 4
    2154:	a9 01       	movw	r20, r18
    2156:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_u8GetPinValue>
    215a:	80 93 9e 00 	sts	0x009E, r24
			SPI_u8Transceive(Status);
    215e:	80 91 9e 00 	lds	r24, 0x009E
    2162:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <SPI_u8Transceive>
		}
	}

}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LED>:
void LED (u8  Copy_u8ROOM , u8 Copy_u8Status)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <LED+0x6>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8ROOM=='1')
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	81 33       	cpi	r24, 0x31	; 49
    2184:	e1 f4       	brne	.+56     	; 0x21be <LED+0x4c>
	{
		if(Copy_u8Status=='1')
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	81 33       	cpi	r24, 0x31	; 49
    218a:	59 f4       	brne	.+22     	; 0x21a2 <LED+0x30>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN0,DIO_PIN_OUT);
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    21a0:	2c c0       	rjmp	.+88     	; 0x21fa <LED+0x88>
		}
		else if(Copy_u8Status=='2')
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	82 33       	cpi	r24, 0x32	; 50
    21a6:	49 f5       	brne	.+82     	; 0x21fa <LED+0x88>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN0,DIO_PIN_OUT);
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_LOW);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    21bc:	1e c0       	rjmp	.+60     	; 0x21fa <LED+0x88>
		}}
	else if(Copy_u8ROOM=='2')
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	82 33       	cpi	r24, 0x32	; 50
    21c2:	d9 f4       	brne	.+54     	; 0x21fa <LED+0x88>
	{
		if(Copy_u8Status=='1')
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	81 33       	cpi	r24, 0x31	; 49
    21c8:	59 f4       	brne	.+22     	; 0x21e0 <LED+0x6e>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUT);
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	63 e0       	ldi	r22, 0x03	; 3
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	63 e0       	ldi	r22, 0x03	; 3
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    21de:	0d c0       	rjmp	.+26     	; 0x21fa <LED+0x88>
		}
		else if(Copy_u8Status=='2')
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	82 33       	cpi	r24, 0x32	; 50
    21e4:	51 f4       	brne	.+20     	; 0x21fa <LED+0x88>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUT);
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	63 e0       	ldi	r22, 0x03	; 3
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	63 e0       	ldi	r22, 0x03	; 3
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
		}
	}
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <TV>:

void TV  (u8  Copy_u8ROOM , u8 Copy_u8Status)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <TV+0x6>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8ROOM=='1')
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	81 33       	cpi	r24, 0x31	; 49
    2216:	e1 f4       	brne	.+56     	; 0x2250 <TV+0x4c>
	{
		if(Copy_u8Status=='1')
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	81 33       	cpi	r24, 0x31	; 49
    221c:	59 f4       	brne	.+22     	; 0x2234 <TV+0x30>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN1,DIO_PIN_OUT);
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	61 e0       	ldi	r22, 0x01	; 1
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    2232:	2c c0       	rjmp	.+88     	; 0x228c <TV+0x88>
		}
		else if(Copy_u8Status=='2')
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	82 33       	cpi	r24, 0x32	; 50
    2238:	49 f5       	brne	.+82     	; 0x228c <TV+0x88>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN1,DIO_PIN_OUT);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_LOW);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    224e:	1e c0       	rjmp	.+60     	; 0x228c <TV+0x88>
		}}
	else if(Copy_u8ROOM=='2')
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	82 33       	cpi	r24, 0x32	; 50
    2254:	d9 f4       	brne	.+54     	; 0x228c <TV+0x88>
	{
		if(Copy_u8Status=='1')
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	81 33       	cpi	r24, 0x31	; 49
    225a:	59 f4       	brne	.+22     	; 0x2272 <TV+0x6e>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN4,DIO_PIN_OUT);
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	64 e0       	ldi	r22, 0x04	; 4
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	64 e0       	ldi	r22, 0x04	; 4
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    2270:	0d c0       	rjmp	.+26     	; 0x228c <TV+0x88>
		}
		else if(Copy_u8Status=='2')
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	82 33       	cpi	r24, 0x32	; 50
    2276:	51 f4       	brne	.+20     	; 0x228c <TV+0x88>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN4,DIO_PIN_OUT);
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	64 e0       	ldi	r22, 0x04	; 4
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_LOW);
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	64 e0       	ldi	r22, 0x04	; 4
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
		}
	}
}
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <AC>:

void AC  (u8  Copy_u8ROOM , u8 Copy_u8Status)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <AC+0x6>
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8ROOM=='1')
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	81 33       	cpi	r24, 0x31	; 49
    22a8:	89 f5       	brne	.+98     	; 0x230c <AC+0x76>
	{
		if(Copy_u8Status=='1')
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	81 33       	cpi	r24, 0x31	; 49
    22ae:	a9 f4       	brne	.+42     	; 0x22da <AC+0x44>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN2,DIO_PIN_OUT);
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	62 e0       	ldi	r22, 0x02	; 2
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
			DIO_u8SetPinDir(DIO_PORTA,DIO_PIN5,DIO_PIN_OUT);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	65 e0       	ldi	r22, 0x05	; 5
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	65 e0       	ldi	r22, 0x05	; 5
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    22d8:	4b c0       	rjmp	.+150    	; 0x2370 <AC+0xda>

		}
		else if(Copy_u8Status=='2')
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	82 33       	cpi	r24, 0x32	; 50
    22de:	09 f0       	breq	.+2      	; 0x22e2 <AC+0x4c>
    22e0:	47 c0       	rjmp	.+142    	; 0x2370 <AC+0xda>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN2,DIO_PIN_OUT);
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	62 e0       	ldi	r22, 0x02	; 2
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_LOW);
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
			DIO_u8SetPinDir(DIO_PORTA,DIO_PIN5,DIO_PIN_OUT);
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	65 e0       	ldi	r22, 0x05	; 5
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTA,DIO_PIN5,DIO_LOW);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	65 e0       	ldi	r22, 0x05	; 5
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    230a:	32 c0       	rjmp	.+100    	; 0x2370 <AC+0xda>
		}}
	else if(Copy_u8ROOM=='2')
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	82 33       	cpi	r24, 0x32	; 50
    2310:	79 f5       	brne	.+94     	; 0x2370 <AC+0xda>
	{
		if(Copy_u8Status=='1')
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	81 33       	cpi	r24, 0x31	; 49
    2316:	a9 f4       	brne	.+42     	; 0x2342 <AC+0xac>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN5,DIO_PIN_OUT);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	65 e0       	ldi	r22, 0x05	; 5
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	65 e0       	ldi	r22, 0x05	; 5
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
			DIO_u8SetPinDir(DIO_PORTA,DIO_PIN4,DIO_PIN_OUT);
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	64 e0       	ldi	r22, 0x04	; 4
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	64 e0       	ldi	r22, 0x04	; 4
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    2340:	17 c0       	rjmp	.+46     	; 0x2370 <AC+0xda>

		}
		else if(Copy_u8Status=='2')
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	82 33       	cpi	r24, 0x32	; 50
    2346:	a1 f4       	brne	.+40     	; 0x2370 <AC+0xda>
		{
			DIO_u8SetPinDir(DIO_PORTC,DIO_PIN5,DIO_PIN_OUT);
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	65 e0       	ldi	r22, 0x05	; 5
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_LOW);
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	65 e0       	ldi	r22, 0x05	; 5
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
			DIO_u8SetPinDir(DIO_PORTA,DIO_PIN4,DIO_PIN_OUT);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	64 e0       	ldi	r22, 0x04	; 4
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
			DIO_u8SetPinValue(DIO_PORTA,DIO_PIN4,DIO_LOW);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	64 e0       	ldi	r22, 0x04	; 4
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
		}
	}
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <ROOM>:
void ROOM  (u8  Copy_u8ROOM )
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	0f 92       	push	r0
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ROOM=='1')
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	81 33       	cpi	r24, 0x31	; 49
    238a:	59 f4       	brne	.+22     	; 0x23a2 <ROOM+0x28>
	{

		DIO_u8SetPinDir(DIO_PORTC,DIO_PIN6,DIO_PIN_OUT);
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	66 e0       	ldi	r22, 0x06	; 6
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_HIGH);
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	66 e0       	ldi	r22, 0x06	; 6
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <ROOM+0x42>

	}
	else if(Copy_u8ROOM=='2')
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	82 33       	cpi	r24, 0x32	; 50
    23a6:	51 f4       	brne	.+20     	; 0x23bc <ROOM+0x42>
	{

		DIO_u8SetPinDir(DIO_PORTC,DIO_PIN7,DIO_PIN_OUT);
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	67 e0       	ldi	r22, 0x07	; 7
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	67 e0       	ldi	r22, 0x07	; 7
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_u8SetPinValue>

	}
}
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <LM35>:
u8 LM35(void){
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	0f 92       	push	r0
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinDir(DIO_PORTA,DIO_PIN0,DIO_PORT_IN);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_u8SetPinDir>
	u8 Local_u8Temp=0;
    23d8:	19 82       	std	Y+1, r1	; 0x01

	Local_u8Temp=TEMP_u8Read(0);
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	0e 94 85 0c 	call	0x190a	; 0x190a <TEMP_u8Read>
    23e0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8Temp;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <__mulsi3>:
    23ec:	62 9f       	mul	r22, r18
    23ee:	d0 01       	movw	r26, r0
    23f0:	73 9f       	mul	r23, r19
    23f2:	f0 01       	movw	r30, r0
    23f4:	82 9f       	mul	r24, r18
    23f6:	e0 0d       	add	r30, r0
    23f8:	f1 1d       	adc	r31, r1
    23fa:	64 9f       	mul	r22, r20
    23fc:	e0 0d       	add	r30, r0
    23fe:	f1 1d       	adc	r31, r1
    2400:	92 9f       	mul	r25, r18
    2402:	f0 0d       	add	r31, r0
    2404:	83 9f       	mul	r24, r19
    2406:	f0 0d       	add	r31, r0
    2408:	74 9f       	mul	r23, r20
    240a:	f0 0d       	add	r31, r0
    240c:	65 9f       	mul	r22, r21
    240e:	f0 0d       	add	r31, r0
    2410:	99 27       	eor	r25, r25
    2412:	72 9f       	mul	r23, r18
    2414:	b0 0d       	add	r27, r0
    2416:	e1 1d       	adc	r30, r1
    2418:	f9 1f       	adc	r31, r25
    241a:	63 9f       	mul	r22, r19
    241c:	b0 0d       	add	r27, r0
    241e:	e1 1d       	adc	r30, r1
    2420:	f9 1f       	adc	r31, r25
    2422:	bd 01       	movw	r22, r26
    2424:	cf 01       	movw	r24, r30
    2426:	11 24       	eor	r1, r1
    2428:	08 95       	ret

0000242a <__udivmodhi4>:
    242a:	aa 1b       	sub	r26, r26
    242c:	bb 1b       	sub	r27, r27
    242e:	51 e1       	ldi	r21, 0x11	; 17
    2430:	07 c0       	rjmp	.+14     	; 0x2440 <__udivmodhi4_ep>

00002432 <__udivmodhi4_loop>:
    2432:	aa 1f       	adc	r26, r26
    2434:	bb 1f       	adc	r27, r27
    2436:	a6 17       	cp	r26, r22
    2438:	b7 07       	cpc	r27, r23
    243a:	10 f0       	brcs	.+4      	; 0x2440 <__udivmodhi4_ep>
    243c:	a6 1b       	sub	r26, r22
    243e:	b7 0b       	sbc	r27, r23

00002440 <__udivmodhi4_ep>:
    2440:	88 1f       	adc	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	5a 95       	dec	r21
    2446:	a9 f7       	brne	.-22     	; 0x2432 <__udivmodhi4_loop>
    2448:	80 95       	com	r24
    244a:	90 95       	com	r25
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	08 95       	ret

00002452 <__udivmodsi4>:
    2452:	a1 e2       	ldi	r26, 0x21	; 33
    2454:	1a 2e       	mov	r1, r26
    2456:	aa 1b       	sub	r26, r26
    2458:	bb 1b       	sub	r27, r27
    245a:	fd 01       	movw	r30, r26
    245c:	0d c0       	rjmp	.+26     	; 0x2478 <__udivmodsi4_ep>

0000245e <__udivmodsi4_loop>:
    245e:	aa 1f       	adc	r26, r26
    2460:	bb 1f       	adc	r27, r27
    2462:	ee 1f       	adc	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	a2 17       	cp	r26, r18
    2468:	b3 07       	cpc	r27, r19
    246a:	e4 07       	cpc	r30, r20
    246c:	f5 07       	cpc	r31, r21
    246e:	20 f0       	brcs	.+8      	; 0x2478 <__udivmodsi4_ep>
    2470:	a2 1b       	sub	r26, r18
    2472:	b3 0b       	sbc	r27, r19
    2474:	e4 0b       	sbc	r30, r20
    2476:	f5 0b       	sbc	r31, r21

00002478 <__udivmodsi4_ep>:
    2478:	66 1f       	adc	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	1a 94       	dec	r1
    2482:	69 f7       	brne	.-38     	; 0x245e <__udivmodsi4_loop>
    2484:	60 95       	com	r22
    2486:	70 95       	com	r23
    2488:	80 95       	com	r24
    248a:	90 95       	com	r25
    248c:	9b 01       	movw	r18, r22
    248e:	ac 01       	movw	r20, r24
    2490:	bd 01       	movw	r22, r26
    2492:	cf 01       	movw	r24, r30
    2494:	08 95       	ret

00002496 <__prologue_saves__>:
    2496:	2f 92       	push	r2
    2498:	3f 92       	push	r3
    249a:	4f 92       	push	r4
    249c:	5f 92       	push	r5
    249e:	6f 92       	push	r6
    24a0:	7f 92       	push	r7
    24a2:	8f 92       	push	r8
    24a4:	9f 92       	push	r9
    24a6:	af 92       	push	r10
    24a8:	bf 92       	push	r11
    24aa:	cf 92       	push	r12
    24ac:	df 92       	push	r13
    24ae:	ef 92       	push	r14
    24b0:	ff 92       	push	r15
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	ca 1b       	sub	r28, r26
    24c0:	db 0b       	sbc	r29, r27
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	09 94       	ijmp

000024ce <__epilogue_restores__>:
    24ce:	2a 88       	ldd	r2, Y+18	; 0x12
    24d0:	39 88       	ldd	r3, Y+17	; 0x11
    24d2:	48 88       	ldd	r4, Y+16	; 0x10
    24d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24da:	8c 84       	ldd	r8, Y+12	; 0x0c
    24dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    24de:	aa 84       	ldd	r10, Y+10	; 0x0a
    24e0:	b9 84       	ldd	r11, Y+9	; 0x09
    24e2:	c8 84       	ldd	r12, Y+8	; 0x08
    24e4:	df 80       	ldd	r13, Y+7	; 0x07
    24e6:	ee 80       	ldd	r14, Y+6	; 0x06
    24e8:	fd 80       	ldd	r15, Y+5	; 0x05
    24ea:	0c 81       	ldd	r16, Y+4	; 0x04
    24ec:	1b 81       	ldd	r17, Y+3	; 0x03
    24ee:	aa 81       	ldd	r26, Y+2	; 0x02
    24f0:	b9 81       	ldd	r27, Y+1	; 0x01
    24f2:	ce 0f       	add	r28, r30
    24f4:	d1 1d       	adc	r29, r1
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	ed 01       	movw	r28, r26
    2502:	08 95       	ret

00002504 <_exit>:
    2504:	f8 94       	cli

00002506 <__stop_program>:
    2506:	ff cf       	rjmp	.-2      	; 0x2506 <__stop_program>
