
MH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002b78  00002c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800174  00800174  00002d20  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110c  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007184  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 10 	call	0x2066	; 0x2066 <main>
      8a:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e4       	ldi	r26, 0x41	; 65
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e4       	ldi	r24, 0x41	; 65
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "BIT_MATH.h"
#include "CLCD_interface.h"
#include "DIO_INTERFACE.h"
#include <util/delay.h>
void CLCD_voidSendCommand(u8 copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Setting RS pin to low*/
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_LOW);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
/*Setting RW pin low for write*/
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>

/*Set command data pins*/
DIO_u8SetPortValue(CLCD_DATA_PORT,copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_u8SetPortValue>

/*Send Enable pulse*/
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	89 e1       	ldi	r24, 0x19	; 25
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2e 97       	sbiw	r28, 0x0e	; 14
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a0 e2       	ldi	r26, 0x20	; 32
     c9c:	b2 e4       	ldi	r27, 0x42	; 66
     c9e:	8b 87       	std	Y+11, r24	; 0x0b
     ca0:	9c 87       	std	Y+12, r25	; 0x0c
     ca2:	ad 87       	std	Y+13, r26	; 0x0d
     ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
     caa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cac:	9e 85       	ldd	r25, Y+14	; 0x0e
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a e7       	ldi	r20, 0x7A	; 122
     cb4:	53 e4       	ldi	r21, 0x43	; 67
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	8f 83       	std	Y+7, r24	; 0x07
     cc0:	98 87       	std	Y+8, r25	; 0x08
     cc2:	a9 87       	std	Y+9, r26	; 0x09
     cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc6:	6f 81       	ldd	r22, Y+7	; 0x07
     cc8:	78 85       	ldd	r23, Y+8	; 0x08
     cca:	89 85       	ldd	r24, Y+9	; 0x09
     ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e8       	ldi	r20, 0x80	; 128
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cda:	88 23       	and	r24, r24
     cdc:	2c f4       	brge	.+10     	; 0xce8 <CLCD_voidInit+0x66>
		__ticks = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9e 83       	std	Y+6, r25	; 0x06
     ce4:	8d 83       	std	Y+5, r24	; 0x05
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     ce8:	6f 81       	ldd	r22, Y+7	; 0x07
     cea:	78 85       	ldd	r23, Y+8	; 0x08
     cec:	89 85       	ldd	r24, Y+9	; 0x09
     cee:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	57 e4       	ldi	r21, 0x47	; 71
     cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	4c f5       	brge	.+82     	; 0xd52 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	6b 85       	ldd	r22, Y+11	; 0x0b
     d02:	7c 85       	ldd	r23, Y+12	; 0x0c
     d04:	8d 85       	ldd	r24, Y+13	; 0x0d
     d06:	9e 85       	ldd	r25, Y+14	; 0x0e
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	9e 83       	std	Y+6, r25	; 0x06
     d26:	8d 83       	std	Y+5, r24	; 0x05
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <CLCD_voidInit+0xc6>
     d2a:	89 e1       	ldi	r24, 0x19	; 25
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9c 83       	std	Y+4, r25	; 0x04
     d30:	8b 83       	std	Y+3, r24	; 0x03
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <CLCD_voidInit+0xb4>
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	69 f7       	brne	.-38     	; 0xd2a <CLCD_voidInit+0xa8>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	6f 81       	ldd	r22, Y+7	; 0x07
     d54:	78 85       	ldd	r23, Y+8	; 0x08
     d56:	89 85       	ldd	r24, Y+9	; 0x09
     d58:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <CLCD_voidInit+0xf0>
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
	/*Wait more that 30 ms*/
	_delay_ms(40);

	/*Function set ,2 lines AND 5*8 size*/
	CLCD_voidSendCommand(0b00111000);
     d7a:	88 e3       	ldi	r24, 0x38	; 56
     d7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Display on/off control:diplay enable,disable cursor*/
	CLCD_voidSendCommand(0b00001100);
     d80:	8c e0       	ldi	r24, 0x0C	; 12
     d82:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*display clear*/
	CLCD_voidSendCommand(1);
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>



}
     d8c:	2e 96       	adiw	r28, 0x0e	; 14
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <CLCD_voidSendData>:


void CLCD_voidSendData(u8 copy_u8Data)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	2f 97       	sbiw	r28, 0x0f	; 15
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	8f 87       	std	Y+15, r24	; 0x0f

	/*Setting RS pin to HIGH*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_HIGH);
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	/*Setting RW pin low for write*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_LOW);
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>

	/*Set data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,copy_u8Data);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	6f 85       	ldd	r22, Y+15	; 0x0f
     dcc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_HIGH);
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	62 e0       	ldi	r22, 0x02	; 2
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e4       	ldi	r27, 0x40	; 64
     de2:	8b 87       	std	Y+11, r24	; 0x0b
     de4:	9c 87       	std	Y+12, r25	; 0x0c
     de6:	ad 87       	std	Y+13, r26	; 0x0d
     de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a e7       	ldi	r20, 0x7A	; 122
     df8:	53 e4       	ldi	r21, 0x43	; 67
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	98 87       	std	Y+8, r25	; 0x08
     e06:	a9 87       	std	Y+9, r26	; 0x09
     e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <CLCD_voidSendData+0x8e>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <CLCD_voidSendData+0xee>
     e6e:	89 e1       	ldi	r24, 0x19	; 25
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <CLCD_voidSendData+0xdc>
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <CLCD_voidSendData+0xd0>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <CLCD_voidSendData+0x118>
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_LOW);
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	62 e0       	ldi	r22, 0x02	; 2
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>


}
     ec8:	2f 96       	adiw	r28, 0x0f	; 15
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidSendString>:

void CLCD_voidSendString(const u8* Copy_u8String)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8Counter=0;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_voidSendString+0x30>
while(Copy_u8String[Local_u8Counter]!='\0')
{
    CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
    Local_u8Counter++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const u8* Copy_u8String)
{
u8 Local_u8Counter=0;
while(Copy_u8String[Local_u8Counter]!='\0')
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_voidSendString+0x14>
{
    CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
    Local_u8Counter++;
}

}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(u8 Copy_u8Xposition,u8 Copy_u8Yposition)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_voidGoToXY+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
  u8 Local_u8Address;

  if(Copy_u8Xposition==0)
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 23       	and	r24, r24
     f40:	19 f4       	brne	.+6      	; 0xf48 <CLCD_voidGoToXY+0x1c>
  {
	  Local_u8Address=Copy_u8Yposition;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <CLCD_voidGoToXY+0x28>
  }
  else if(Copy_u8Xposition==1)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	19 f4       	brne	.+6      	; 0xf54 <CLCD_voidGoToXY+0x28>

  {
	  Local_u8Address=Copy_u8Yposition+0x40;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 5c       	subi	r24, 0xC0	; 192
     f52:	89 83       	std	Y+1, r24	; 0x01
  }

  CLCD_voidSendCommand(Local_u8Address|(1<<7));
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 copy_u32Number)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	27 97       	sbiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	6c 83       	std	Y+4, r22	; 0x04
     f7e:	7d 83       	std	Y+5, r23	; 0x05
     f80:	8e 83       	std	Y+6, r24	; 0x06
     f82:	9f 83       	std	Y+7, r25	; 0x07
	u8 Local_u8Digit;
	u8 Local_u8Counter=0;
     f84:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8 Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8 Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	ae 81       	ldd	r26, Y+6	; 0x06
     f8c:	bf 81       	ldd	r27, Y+7	; 0x07
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	a1 05       	cpc	r26, r1
     f92:	b1 05       	cpc	r27, r1
     f94:	b9 f5       	brne	.+110    	; 0x1004 <CLCD_voidWriteNumber+0x9c>
	{
		CLCD_voidSendData(Local_ArrayOfChar[0]);
     f96:	80 91 49 01 	lds	r24, 0x0149
     f9a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
     f9e:	4e c0       	rjmp	.+156    	; 0x103c <CLCD_voidWriteNumber+0xd4>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	ae 81       	ldd	r26, Y+6	; 0x06
     fa6:	bf 81       	ldd	r27, Y+7	; 0x07
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodsi4>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	ae 81       	ldd	r26, Y+6	; 0x06
     fc4:	bf 81       	ldd	r27, Y+7	; 0x07
     fc6:	2a e0       	ldi	r18, 0x0A	; 10
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodsi4>
     fd6:	da 01       	movw	r26, r20
     fd8:	c9 01       	movw	r24, r18
     fda:	8c 83       	std	Y+4, r24	; 0x04
     fdc:	9d 83       	std	Y+5, r25	; 0x05
     fde:	ae 83       	std	Y+6, r26	; 0x06
     fe0:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	e7 5b       	subi	r30, 0xB7	; 183
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	80 81       	ld	r24, Z
     ff6:	f9 01       	movw	r30, r18
     ff8:	ec 58       	subi	r30, 0x8C	; 140
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	80 83       	st	Z, r24
			Local_u8Counter++;
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	ae 81       	ldd	r26, Y+6	; 0x06
    100a:	bf 81       	ldd	r27, Y+7	; 0x07
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	a1 05       	cpc	r26, r1
    1010:	b1 05       	cpc	r27, r1
    1012:	31 f6       	brne	.-116    	; 0xfa0 <CLCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <CLCD_voidWriteNumber+0xce>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	99 27       	eor	r25, r25
    1020:	87 fd       	sbrc	r24, 7
    1022:	90 95       	com	r25
    1024:	fc 01       	movw	r30, r24
    1026:	ec 58       	subi	r30, 0x8C	; 140
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	80 81       	ld	r24, Z
    102c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	81 50       	subi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 23       	and	r24, r24
    103a:	84 f7       	brge	.-32     	; 0x101c <CLCD_voidWriteNumber+0xb4>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    103c:	27 96       	adiw	r28, 0x07	; 7
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <CLCD_voidWriteSpecialChar>:
void CLCD_voidWriteSpecialChar(u8* copy_pu8Pattern,u8 copy_u8PatternNumber,u8 copy_u8Xposition,u8 copy_u8Yposition)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	27 97       	sbiw	r28, 0x07	; 7
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	6d 83       	std	Y+5, r22	; 0x05
    1068:	4e 83       	std	Y+6, r20	; 0x06
    106a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Address=0;
    106c:	1a 82       	std	Y+2, r1	; 0x02
	/*Set the CGRAM address*/
Local_u8CGRAM_Address=copy_u8PatternNumber*8;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	8a 83       	std	Y+2, r24	; 0x02
CLCD_voidSendCommand(Local_u8CGRAM_Address|(1<<6));
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 64       	ori	r24, 0x40	; 64
    1086:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

for(u8 i=0;i<8;i++)
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <CLCD_voidWriteSpecialChar+0x5c>
{
	CLCD_voidSendData(copy_pu8Pattern[i]);
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	fc 01       	movw	r30, r24
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	80 81       	ld	r24, Z
    10a0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
	u8 Local_u8CGRAM_Address=0;
	/*Set the CGRAM address*/
Local_u8CGRAM_Address=copy_u8PatternNumber*8;
CLCD_voidSendCommand(Local_u8CGRAM_Address|(1<<6));

for(u8 i=0;i<8;i++)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	78 f3       	brcs	.-34     	; 0x108e <CLCD_voidWriteSpecialChar+0x40>
{
	CLCD_voidSendData(copy_pu8Pattern[i]);
}
/*go back to DDRAM to display the Arr*/
 CLCD_voidGoToXY(copy_u8Xposition,copy_u8Yposition);
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	6f 81       	ldd	r22, Y+7	; 0x07
    10b4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>

CLCD_voidSendData(copy_u8PatternNumber);
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>

}
    10be:	27 96       	adiw	r28, 0x07	; 7
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <DIO_u8SetPortValue>:
#include"BIT_MATH.h"
#include "DIO_INTERFACE.h"
#include <avr/io.h>

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_u8SetPortValue+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_u8SetPortValue+0x8>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <DIO_u8SetPortValue+0xa>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	6b 83       	std	Y+3, r22	; 0x03

   u8 Local_u8ErrorState=0;
    10e2:	19 82       	std	Y+1, r1	; 0x01
   if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	28 f0       	brcs	.+10     	; 0x10f4 <DIO_u8SetPortValue+0x24>
   {
	   Local_u8ErrorState=1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	89 83       	std	Y+1, r24	; 0x01
	  return Local_u8ErrorState;
    10ee:	29 81       	ldd	r18, Y+1	; 0x01
    10f0:	2e 83       	std	Y+6, r18	; 0x06
    10f2:	34 c0       	rjmp	.+104    	; 0x115c <DIO_u8SetPortValue+0x8c>
   }
   else
   {
	   switch(Copy_u8Port)
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3d 83       	std	Y+5, r19	; 0x05
    10fc:	2c 83       	std	Y+4, r18	; 0x04
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	d1 f0       	breq	.+52     	; 0x113c <DIO_u8SetPortValue+0x6c>
    1108:	2c 81       	ldd	r18, Y+4	; 0x04
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	2c f4       	brge	.+10     	; 0x111c <DIO_u8SetPortValue+0x4c>
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	61 f0       	breq	.+24     	; 0x1132 <DIO_u8SetPortValue+0x62>
    111a:	1e c0       	rjmp	.+60     	; 0x1158 <DIO_u8SetPortValue+0x88>
    111c:	2c 81       	ldd	r18, Y+4	; 0x04
    111e:	3d 81       	ldd	r19, Y+5	; 0x05
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	81 f0       	breq	.+32     	; 0x1146 <DIO_u8SetPortValue+0x76>
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <DIO_u8SetPortValue+0x80>
    1130:	13 c0       	rjmp	.+38     	; 0x1158 <DIO_u8SetPortValue+0x88>
	   {
	   case DIO_PORTA:PORTA=Copy_u8Value;break;
    1132:	eb e3       	ldi	r30, 0x3B	; 59
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	80 83       	st	Z, r24
    113a:	0e c0       	rjmp	.+28     	; 0x1158 <DIO_u8SetPortValue+0x88>
	   case DIO_PORTB:PORTB=Copy_u8Value;break;
    113c:	e8 e3       	ldi	r30, 0x38	; 56
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	80 83       	st	Z, r24
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <DIO_u8SetPortValue+0x88>
	   case DIO_PORTC:PORTC=Copy_u8Value;break;
    1146:	e5 e3       	ldi	r30, 0x35	; 53
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	80 83       	st	Z, r24
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <DIO_u8SetPortValue+0x88>
	   case DIO_PORTD:PORTD=Copy_u8Value;break;
    1150:	e2 e3       	ldi	r30, 0x32	; 50
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	80 83       	st	Z, r24
	   default:;
        }
   }
return Local_u8ErrorState;
    1158:	99 81       	ldd	r25, Y+1	; 0x01
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    115e:	26 96       	adiw	r28, 0x06	; 6
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	29 97       	sbiw	r28, 0x09	; 9
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	6b 83       	std	Y+3, r22	; 0x03
    1188:	4c 83       	std	Y+4, r20	; 0x04

 u8 Local_u8ErrorState=0;
    118a:	19 82       	std	Y+1, r1	; 0x01

 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	28 f0       	brcs	.+10     	; 0x119c <DIO_u8SetPinValue+0x2c>
    {
 	   Local_u8ErrorState=1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
 	  return Local_u8ErrorState;
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	29 87       	std	Y+9, r18	; 0x09
    119a:	f4 c0       	rjmp	.+488    	; 0x1384 <DIO_u8SetPinValue+0x214>
    }
 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	28 f0       	brcs	.+10     	; 0x11ac <DIO_u8SetPinValue+0x3c>
 {
	   Local_u8ErrorState=1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
       return Local_u8ErrorState;
    11a6:	39 81       	ldd	r19, Y+1	; 0x01
    11a8:	39 87       	std	Y+9, r19	; 0x09
    11aa:	ec c0       	rjmp	.+472    	; 0x1384 <DIO_u8SetPinValue+0x214>
 }
 else
 {
	 if(Copy_u8Value==DIO_HIGH)
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <DIO_u8SetPinValue+0x44>
    11b2:	6f c0       	rjmp	.+222    	; 0x1292 <DIO_u8SetPinValue+0x122>
	 {

		 switch(Copy_u8Port)
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	38 87       	std	Y+8, r19	; 0x08
    11bc:	2f 83       	std	Y+7, r18	; 0x07
    11be:	8f 81       	ldd	r24, Y+7	; 0x07
    11c0:	98 85       	ldd	r25, Y+8	; 0x08
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	49 f1       	breq	.+82     	; 0x121a <DIO_u8SetPinValue+0xaa>
    11c8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ca:	38 85       	ldd	r19, Y+8	; 0x08
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	2c f4       	brge	.+10     	; 0x11dc <DIO_u8SetPinValue+0x6c>
    11d2:	8f 81       	ldd	r24, Y+7	; 0x07
    11d4:	98 85       	ldd	r25, Y+8	; 0x08
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <DIO_u8SetPinValue+0x82>
    11da:	d2 c0       	rjmp	.+420    	; 0x1380 <DIO_u8SetPinValue+0x210>
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	71 f1       	breq	.+92     	; 0x1242 <DIO_u8SetPinValue+0xd2>
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	e9 f1       	breq	.+122    	; 0x126a <DIO_u8SetPinValue+0xfa>
    11f0:	c7 c0       	rjmp	.+398    	; 0x1380 <DIO_u8SetPinValue+0x210>
		 {
		 case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    11f2:	ab e3       	ldi	r26, 0x3B	; 59
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	eb e3       	ldi	r30, 0x3B	; 59
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_u8SetPinValue+0xa0>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_u8SetPinValue+0x9c>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	b3 c0       	rjmp	.+358    	; 0x1380 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    121a:	a8 e3       	ldi	r26, 0x38	; 56
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e3       	ldi	r30, 0x38	; 56
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_u8SetPinValue+0xc8>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_u8SetPinValue+0xc4>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	9f c0       	rjmp	.+318    	; 0x1380 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1242:	a5 e3       	ldi	r26, 0x35	; 53
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e5 e3       	ldi	r30, 0x35	; 53
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8SetPinValue+0xf0>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8SetPinValue+0xec>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	8b c0       	rjmp	.+278    	; 0x1380 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    126a:	a2 e3       	ldi	r26, 0x32	; 50
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8SetPinValue+0x118>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8SetPinValue+0x114>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	77 c0       	rjmp	.+238    	; 0x1380 <DIO_u8SetPinValue+0x210>
         default:;
		 }
	 }
	 else if(Copy_u8Value==DIO_LOW)
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	88 23       	and	r24, r24
    1296:	09 f0       	breq	.+2      	; 0x129a <DIO_u8SetPinValue+0x12a>
    1298:	73 c0       	rjmp	.+230    	; 0x1380 <DIO_u8SetPinValue+0x210>
	 {
		 switch(Copy_u8Port)
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3e 83       	std	Y+6, r19	; 0x06
    12a2:	2d 83       	std	Y+5, r18	; 0x05
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	59 f1       	breq	.+86     	; 0x1304 <DIO_u8SetPinValue+0x194>
    12ae:	2d 81       	ldd	r18, Y+5	; 0x05
    12b0:	3e 81       	ldd	r19, Y+6	; 0x06
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <DIO_u8SetPinValue+0x152>
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	69 f0       	breq	.+26     	; 0x12da <DIO_u8SetPinValue+0x16a>
    12c0:	5f c0       	rjmp	.+190    	; 0x1380 <DIO_u8SetPinValue+0x210>
    12c2:	2d 81       	ldd	r18, Y+5	; 0x05
    12c4:	3e 81       	ldd	r19, Y+6	; 0x06
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	89 f1       	breq	.+98     	; 0x132e <DIO_u8SetPinValue+0x1be>
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	91 05       	cpc	r25, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <DIO_u8SetPinValue+0x168>
    12d6:	40 c0       	rjmp	.+128    	; 0x1358 <DIO_u8SetPinValue+0x1e8>
    12d8:	53 c0       	rjmp	.+166    	; 0x1380 <DIO_u8SetPinValue+0x210>
		 		 {
		 case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    12da:	ab e3       	ldi	r26, 0x3B	; 59
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e3       	ldi	r30, 0x3B	; 59
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_u8SetPinValue+0x188>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_u8SetPinValue+0x184>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	3e c0       	rjmp	.+124    	; 0x1380 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8SetPinValue+0x1b2>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8SetPinValue+0x1ae>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	29 c0       	rjmp	.+82     	; 0x1380 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    132e:	a5 e3       	ldi	r26, 0x35	; 53
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e3       	ldi	r30, 0x35	; 53
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_u8SetPinValue+0x1dc>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_u8SetPinValue+0x1d8>
    1350:	80 95       	com	r24
    1352:	84 23       	and	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <DIO_u8SetPinValue+0x210>
		 case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_u8SetPinValue+0x206>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_u8SetPinValue+0x202>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
		 default:;
		 		 }
	 }
 }
 return Local_u8ErrorState;
    1380:	99 81       	ldd	r25, Y+1	; 0x01
    1382:	99 87       	std	Y+9, r25	; 0x09
    1384:	89 85       	ldd	r24, Y+9	; 0x09
}
    1386:	29 96       	adiw	r28, 0x09	; 9
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_u8SetPortDir>:

u8 DIO_u8SetPortDir(u8 Copy_u8Port,u8 Copy_u8Direction)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_u8SetPortDir+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <DIO_u8SetPortDir+0x8>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_u8SetPortDir+0xa>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    13aa:	19 82       	std	Y+1, r1	; 0x01
if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	28 f0       	brcs	.+10     	; 0x13bc <DIO_u8SetPortDir+0x24>
{
	   Local_u8ErrorState=1;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
	  return Local_u8ErrorState;
    13b6:	29 81       	ldd	r18, Y+1	; 0x01
    13b8:	2e 83       	std	Y+6, r18	; 0x06
    13ba:	34 c0       	rjmp	.+104    	; 0x1424 <DIO_u8SetPortDir+0x8c>
}
else
{

     switch(Copy_u8Port)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3d 83       	std	Y+5, r19	; 0x05
    13c4:	2c 83       	std	Y+4, r18	; 0x04
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	91 05       	cpc	r25, r1
    13ce:	d1 f0       	breq	.+52     	; 0x1404 <DIO_u8SetPortDir+0x6c>
    13d0:	2c 81       	ldd	r18, Y+4	; 0x04
    13d2:	3d 81       	ldd	r19, Y+5	; 0x05
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <DIO_u8SetPortDir+0x4c>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	61 f0       	breq	.+24     	; 0x13fa <DIO_u8SetPortDir+0x62>
    13e2:	1e c0       	rjmp	.+60     	; 0x1420 <DIO_u8SetPortDir+0x88>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	81 f0       	breq	.+32     	; 0x140e <DIO_u8SetPortDir+0x76>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	91 05       	cpc	r25, r1
    13f6:	81 f0       	breq	.+32     	; 0x1418 <DIO_u8SetPortDir+0x80>
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <DIO_u8SetPortDir+0x88>
     {
     case DIO_PORTA:DDRA=Copy_u8Direction;break;
    13fa:	ea e3       	ldi	r30, 0x3A	; 58
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	80 83       	st	Z, r24
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <DIO_u8SetPortDir+0x88>
     case DIO_PORTB:DDRB=Copy_u8Direction;break;
    1404:	e7 e3       	ldi	r30, 0x37	; 55
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	80 83       	st	Z, r24
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <DIO_u8SetPortDir+0x88>
     case DIO_PORTC:DDRC=Copy_u8Direction;break;
    140e:	e4 e3       	ldi	r30, 0x34	; 52
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	80 83       	st	Z, r24
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <DIO_u8SetPortDir+0x88>
     case DIO_PORTD:DDRD=Copy_u8Direction;break;
    1418:	e1 e3       	ldi	r30, 0x31	; 49
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	80 83       	st	Z, r24




  }
return Local_u8ErrorState;
    1420:	99 81       	ldd	r25, Y+1	; 0x01
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1426:	26 96       	adiw	r28, 0x06	; 6
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <DIO_u8SetPinDir>:


u8 DIO_u8SetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	29 97       	sbiw	r28, 0x09	; 9
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
    1450:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1452:	19 82       	std	Y+1, r1	; 0x01

	 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	28 f0       	brcs	.+10     	; 0x1464 <DIO_u8SetPinDir+0x2c>
	    {
	 	   Local_u8ErrorState=1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
	 	  return Local_u8ErrorState;
    145e:	29 81       	ldd	r18, Y+1	; 0x01
    1460:	29 87       	std	Y+9, r18	; 0x09
    1462:	f4 c0       	rjmp	.+488    	; 0x164c <DIO_u8SetPinDir+0x214>
	    }
	 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 30       	cpi	r24, 0x08	; 8
    1468:	28 f0       	brcs	.+10     	; 0x1474 <DIO_u8SetPinDir+0x3c>
	 {
		   Local_u8ErrorState=1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
	       return Local_u8ErrorState;
    146e:	39 81       	ldd	r19, Y+1	; 0x01
    1470:	39 87       	std	Y+9, r19	; 0x09
    1472:	ec c0       	rjmp	.+472    	; 0x164c <DIO_u8SetPinDir+0x214>
	 }
	 else
	 {
		 if(Copy_u8Direction==DIO_PIN_OUT)
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	09 f0       	breq	.+2      	; 0x147c <DIO_u8SetPinDir+0x44>
    147a:	6f c0       	rjmp	.+222    	; 0x155a <DIO_u8SetPinDir+0x122>
		 {
			switch(Copy_u8Port)
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	38 87       	std	Y+8, r19	; 0x08
    1484:	2f 83       	std	Y+7, r18	; 0x07
    1486:	8f 81       	ldd	r24, Y+7	; 0x07
    1488:	98 85       	ldd	r25, Y+8	; 0x08
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	49 f1       	breq	.+82     	; 0x14e2 <DIO_u8SetPinDir+0xaa>
    1490:	2f 81       	ldd	r18, Y+7	; 0x07
    1492:	38 85       	ldd	r19, Y+8	; 0x08
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <DIO_u8SetPinDir+0x6c>
    149a:	8f 81       	ldd	r24, Y+7	; 0x07
    149c:	98 85       	ldd	r25, Y+8	; 0x08
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	61 f0       	breq	.+24     	; 0x14ba <DIO_u8SetPinDir+0x82>
    14a2:	d2 c0       	rjmp	.+420    	; 0x1648 <DIO_u8SetPinDir+0x210>
    14a4:	2f 81       	ldd	r18, Y+7	; 0x07
    14a6:	38 85       	ldd	r19, Y+8	; 0x08
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	71 f1       	breq	.+92     	; 0x150a <DIO_u8SetPinDir+0xd2>
    14ae:	8f 81       	ldd	r24, Y+7	; 0x07
    14b0:	98 85       	ldd	r25, Y+8	; 0x08
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	e9 f1       	breq	.+122    	; 0x1532 <DIO_u8SetPinDir+0xfa>
    14b8:	c7 c0       	rjmp	.+398    	; 0x1648 <DIO_u8SetPinDir+0x210>
			{case DIO_PORTA:SET_BIT(DDRA,Copy_u8Pin);break;
    14ba:	aa e3       	ldi	r26, 0x3A	; 58
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ea e3       	ldi	r30, 0x3A	; 58
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_u8SetPinDir+0xa0>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_u8SetPinDir+0x9c>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	b3 c0       	rjmp	.+358    	; 0x1648 <DIO_u8SetPinDir+0x210>
			case DIO_PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
    14e2:	a7 e3       	ldi	r26, 0x37	; 55
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e7 e3       	ldi	r30, 0x37	; 55
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_u8SetPinDir+0xc8>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_u8SetPinDir+0xc4>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	9f c0       	rjmp	.+318    	; 0x1648 <DIO_u8SetPinDir+0x210>
			case DIO_PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
    150a:	a4 e3       	ldi	r26, 0x34	; 52
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e4 e3       	ldi	r30, 0x34	; 52
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_u8SetPinDir+0xf0>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_u8SetPinDir+0xec>
    152c:	84 2b       	or	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	8b c0       	rjmp	.+278    	; 0x1648 <DIO_u8SetPinDir+0x210>
			case DIO_PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
    1532:	a1 e3       	ldi	r26, 0x31	; 49
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e1 e3       	ldi	r30, 0x31	; 49
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_u8SetPinDir+0x118>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_u8SetPinDir+0x114>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	77 c0       	rjmp	.+238    	; 0x1648 <DIO_u8SetPinDir+0x210>
			}
		 }
		 else if(Copy_u8Direction==DIO_PIN_IN)
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	88 23       	and	r24, r24
    155e:	09 f0       	breq	.+2      	; 0x1562 <DIO_u8SetPinDir+0x12a>
    1560:	73 c0       	rjmp	.+230    	; 0x1648 <DIO_u8SetPinDir+0x210>
		 {
			 switch(Copy_u8Port)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3e 83       	std	Y+6, r19	; 0x06
    156a:	2d 83       	std	Y+5, r18	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	59 f1       	breq	.+86     	; 0x15cc <DIO_u8SetPinDir+0x194>
    1576:	2d 81       	ldd	r18, Y+5	; 0x05
    1578:	3e 81       	ldd	r19, Y+6	; 0x06
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_u8SetPinDir+0x152>
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_u8SetPinDir+0x16a>
    1588:	5f c0       	rjmp	.+190    	; 0x1648 <DIO_u8SetPinDir+0x210>
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	3e 81       	ldd	r19, Y+6	; 0x06
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <DIO_u8SetPinDir+0x1be>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_u8SetPinDir+0x168>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_u8SetPinDir+0x1e8>
    15a0:	53 c0       	rjmp	.+166    	; 0x1648 <DIO_u8SetPinDir+0x210>
			{
		    case DIO_PORTA:CLR_BIT(DDRA,Copy_u8Pin);break;
    15a2:	aa e3       	ldi	r26, 0x3A	; 58
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8SetPinDir+0x188>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8SetPinDir+0x184>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	3e c0       	rjmp	.+124    	; 0x1648 <DIO_u8SetPinDir+0x210>
			case DIO_PORTB:CLR_BIT(DDRB,Copy_u8Pin);break;
    15cc:	a7 e3       	ldi	r26, 0x37	; 55
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e7 e3       	ldi	r30, 0x37	; 55
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_u8SetPinDir+0x1b2>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_u8SetPinDir+0x1ae>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	29 c0       	rjmp	.+82     	; 0x1648 <DIO_u8SetPinDir+0x210>
			case DIO_PORTC:CLR_BIT(DDRC,Copy_u8Pin);break;
    15f6:	a4 e3       	ldi	r26, 0x34	; 52
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e4 e3       	ldi	r30, 0x34	; 52
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_u8SetPinDir+0x1dc>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_u8SetPinDir+0x1d8>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <DIO_u8SetPinDir+0x210>
			case DIO_PORTD:CLR_BIT(DDRD,Copy_u8Pin);break;
    1620:	a1 e3       	ldi	r26, 0x31	; 49
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e1 e3       	ldi	r30, 0x31	; 49
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_u8SetPinDir+0x206>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_u8SetPinDir+0x202>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
			}

		 }

	 }
return Local_u8ErrorState;
    1648:	99 81       	ldd	r25, Y+1	; 0x01
    164a:	99 87       	std	Y+9, r25	; 0x09
    164c:	89 85       	ldd	r24, Y+9	; 0x09
}
    164e:	29 96       	adiw	r28, 0x09	; 9
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8 *Copy_u8Value)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	27 97       	sbiw	r28, 0x07	; 7
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	8a 83       	std	Y+2, r24	; 0x02
    1676:	7c 83       	std	Y+4, r23	; 0x04
    1678:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    167a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	84 30       	cpi	r24, 0x04	; 4
    1680:	28 f0       	brcs	.+10     	; 0x168c <DIO_u8GetPortValue+0x2c>
	{
		   Local_u8ErrorState=1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01
		  return Local_u8ErrorState;
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	2f 83       	std	Y+7, r18	; 0x07
    168a:	3c c0       	rjmp	.+120    	; 0x1704 <DIO_u8GetPortValue+0xa4>
	}
	else
	{
		switch(Copy_u8Port)
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	3e 83       	std	Y+6, r19	; 0x06
    1694:	2d 83       	std	Y+5, r18	; 0x05
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	e1 f0       	breq	.+56     	; 0x16d8 <DIO_u8GetPortValue+0x78>
    16a0:	2d 81       	ldd	r18, Y+5	; 0x05
    16a2:	3e 81       	ldd	r19, Y+6	; 0x06
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <DIO_u8GetPortValue+0x54>
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	61 f0       	breq	.+24     	; 0x16ca <DIO_u8GetPortValue+0x6a>
    16b2:	26 c0       	rjmp	.+76     	; 0x1700 <DIO_u8GetPortValue+0xa0>
    16b4:	2d 81       	ldd	r18, Y+5	; 0x05
    16b6:	3e 81       	ldd	r19, Y+6	; 0x06
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	a1 f0       	breq	.+40     	; 0x16e6 <DIO_u8GetPortValue+0x86>
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	b1 f0       	breq	.+44     	; 0x16f4 <DIO_u8GetPortValue+0x94>
    16c8:	1b c0       	rjmp	.+54     	; 0x1700 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_PORTA:*Copy_u8Value=PINA;break;
    16ca:	e9 e3       	ldi	r30, 0x39	; 57
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	eb 81       	ldd	r30, Y+3	; 0x03
    16d2:	fc 81       	ldd	r31, Y+4	; 0x04
    16d4:	80 83       	st	Z, r24
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTB:*Copy_u8Value=PINB;break;
    16d8:	e6 e3       	ldi	r30, 0x36	; 54
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	eb 81       	ldd	r30, Y+3	; 0x03
    16e0:	fc 81       	ldd	r31, Y+4	; 0x04
    16e2:	80 83       	st	Z, r24
    16e4:	0d c0       	rjmp	.+26     	; 0x1700 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTC:*Copy_u8Value=PINC;break;
    16e6:	e3 e3       	ldi	r30, 0x33	; 51
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	80 83       	st	Z, r24
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTD:*Copy_u8Value=PIND;break;
    16f4:	e0 e3       	ldi	r30, 0x30	; 48
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	eb 81       	ldd	r30, Y+3	; 0x03
    16fc:	fc 81       	ldd	r31, Y+4	; 0x04
    16fe:	80 83       	st	Z, r24
default:;

		}
	}
return Local_u8ErrorState;
    1700:	99 81       	ldd	r25, Y+1	; 0x01
    1702:	9f 83       	std	Y+7, r25	; 0x07
    1704:	8f 81       	ldd	r24, Y+7	; 0x07

}
    1706:	27 96       	adiw	r28, 0x07	; 7
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_u8Value)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	28 97       	sbiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	8a 83       	std	Y+2, r24	; 0x02
    172e:	6b 83       	std	Y+3, r22	; 0x03
    1730:	5d 83       	std	Y+5, r21	; 0x05
    1732:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1734:	19 82       	std	Y+1, r1	; 0x01

		 if((Copy_u8Port>DIO_PORTD)||(Copy_u8Port<DIO_PORTA))
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	28 f0       	brcs	.+10     	; 0x1746 <DIO_u8GetPinValue+0x2e>
		    {
		 	   Local_u8ErrorState=1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
		 	  return Local_u8ErrorState;
    1740:	29 81       	ldd	r18, Y+1	; 0x01
    1742:	28 87       	std	Y+8, r18	; 0x08
    1744:	7a c0       	rjmp	.+244    	; 0x183a <DIO_u8GetPinValue+0x122>
		    }
		 else if ((Copy_u8Pin>DIO_PIN7)||(Copy_u8Pin<DIO_PIN0))
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 30       	cpi	r24, 0x08	; 8
    174a:	28 f0       	brcs	.+10     	; 0x1756 <DIO_u8GetPinValue+0x3e>
		 {
			   Local_u8ErrorState=1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
		       return Local_u8ErrorState;
    1750:	39 81       	ldd	r19, Y+1	; 0x01
    1752:	38 87       	std	Y+8, r19	; 0x08
    1754:	72 c0       	rjmp	.+228    	; 0x183a <DIO_u8GetPinValue+0x122>
		 }
		 else
		 {
			switch(Copy_u8Port)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	48 2f       	mov	r20, r24
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	5f 83       	std	Y+7, r21	; 0x07
    175e:	4e 83       	std	Y+6, r20	; 0x06
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	9f 81       	ldd	r25, Y+7	; 0x07
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	59 f1       	breq	.+86     	; 0x17c0 <DIO_u8GetPinValue+0xa8>
    176a:	2e 81       	ldd	r18, Y+6	; 0x06
    176c:	3f 81       	ldd	r19, Y+7	; 0x07
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	34 f4       	brge	.+12     	; 0x1780 <DIO_u8GetPinValue+0x68>
    1774:	4e 81       	ldd	r20, Y+6	; 0x06
    1776:	5f 81       	ldd	r21, Y+7	; 0x07
    1778:	41 15       	cp	r20, r1
    177a:	51 05       	cpc	r21, r1
    177c:	69 f0       	breq	.+26     	; 0x1798 <DIO_u8GetPinValue+0x80>
    177e:	5b c0       	rjmp	.+182    	; 0x1836 <DIO_u8GetPinValue+0x11e>
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	9f 81       	ldd	r25, Y+7	; 0x07
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	91 05       	cpc	r25, r1
    1788:	79 f1       	breq	.+94     	; 0x17e8 <DIO_u8GetPinValue+0xd0>
    178a:	2e 81       	ldd	r18, Y+6	; 0x06
    178c:	3f 81       	ldd	r19, Y+7	; 0x07
    178e:	23 30       	cpi	r18, 0x03	; 3
    1790:	31 05       	cpc	r19, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <DIO_u8GetPinValue+0x7e>
    1794:	3d c0       	rjmp	.+122    	; 0x1810 <DIO_u8GetPinValue+0xf8>
    1796:	4f c0       	rjmp	.+158    	; 0x1836 <DIO_u8GetPinValue+0x11e>
			{
			case DIO_PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1798:	e9 e3       	ldi	r30, 0x39	; 57
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_u8GetPinValue+0x98>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_u8GetPinValue+0x94>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ba:	fd 81       	ldd	r31, Y+5	; 0x05
    17bc:	80 83       	st	Z, r24
    17be:	3b c0       	rjmp	.+118    	; 0x1836 <DIO_u8GetPinValue+0x11e>
			case DIO_PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    17c0:	e6 e3       	ldi	r30, 0x36	; 54
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8GetPinValue+0xc0>
    17d4:	55 95       	asr	r21
    17d6:	47 95       	ror	r20
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_u8GetPinValue+0xbc>
    17dc:	ca 01       	movw	r24, r20
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	ec 81       	ldd	r30, Y+4	; 0x04
    17e2:	fd 81       	ldd	r31, Y+5	; 0x05
    17e4:	80 83       	st	Z, r24
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <DIO_u8GetPinValue+0x11e>
			case DIO_PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    17e8:	e3 e3       	ldi	r30, 0x33	; 51
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_u8GetPinValue+0xe8>
    17fc:	55 95       	asr	r21
    17fe:	47 95       	ror	r20
    1800:	8a 95       	dec	r24
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_u8GetPinValue+0xe4>
    1804:	ca 01       	movw	r24, r20
    1806:	81 70       	andi	r24, 0x01	; 1
    1808:	ec 81       	ldd	r30, Y+4	; 0x04
    180a:	fd 81       	ldd	r31, Y+5	; 0x05
    180c:	80 83       	st	Z, r24
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <DIO_u8GetPinValue+0x11e>
			case DIO_PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1810:	e0 e3       	ldi	r30, 0x30	; 48
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a9 01       	movw	r20, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_u8GetPinValue+0x110>
    1824:	55 95       	asr	r21
    1826:	47 95       	ror	r20
    1828:	8a 95       	dec	r24
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_u8GetPinValue+0x10c>
    182c:	ca 01       	movw	r24, r20
    182e:	81 70       	andi	r24, 0x01	; 1
    1830:	ec 81       	ldd	r30, Y+4	; 0x04
    1832:	fd 81       	ldd	r31, Y+5	; 0x05
    1834:	80 83       	st	Z, r24
			}
		 }
return Local_u8ErrorState;
    1836:	59 81       	ldd	r21, Y+1	; 0x01
    1838:	58 87       	std	Y+8, r21	; 0x08
    183a:	88 85       	ldd	r24, Y+8	; 0x08
}
    183c:	28 96       	adiw	r28, 0x08	; 8
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <GIE_voidEnable>:
#include "BIT_MATH.h"
#include <avr/interrupt.h>
#include "GIE_REGISTER.h"
#include "GIE_interface.h"
void GIE_voidEnable(void)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_I);
    1856:	af e5       	ldi	r26, 0x5F	; 95
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ef e5       	ldi	r30, 0x5F	; 95
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	8c 93       	st	X, r24
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1872:	af e5       	ldi	r26, 0x5F	; 95
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ef e5       	ldi	r30, 0x5F	; 95
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 77       	andi	r24, 0x7F	; 127
    187e:	8c 93       	st	X, r24
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <LCD_voidSendCommand>:
#include "DIO_INTERFACE.h"
#include <util/delay.h>


void LCD_voidSendCommand(u8 copy_u8Command)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	2f 97       	sbiw	r28, 0x0f	; 15
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	8f 87       	std	Y+15, r24	; 0x0f
/*  DIRCTION OF LCD   */
DIO_u8SetPortDir(LCD_DATA_PORT,DIO_PIN_OUT);
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 cc 09 	call	0x1398	; 0x1398 <DIO_u8SetPortDir>
/*   DIRCTION OF RS/RW/E   */
DIO_u8SetPinDir(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_OUT);
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
DIO_u8SetPinDir(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_OUT);
    18ae:	83 e0       	ldi	r24, 0x03	; 3
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
DIO_u8SetPinDir(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUT);
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>

/*Setting RS pin to low*/
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
/*Setting RW pin low for write*/
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    18cc:	83 e0       	ldi	r24, 0x03	; 3
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
/*Set command data pins*/
DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Command);
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    18da:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_u8SetPortValue>
/*Send Enable pulse*/
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e0       	ldi	r26, 0x00	; 0
    18ee:	b0 e4       	ldi	r27, 0x40	; 64
    18f0:	8b 87       	std	Y+11, r24	; 0x0b
    18f2:	9c 87       	std	Y+12, r25	; 0x0c
    18f4:	ad 87       	std	Y+13, r26	; 0x0d
    18f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8f 83       	std	Y+7, r24	; 0x07
    1912:	98 87       	std	Y+8, r25	; 0x08
    1914:	a9 87       	std	Y+9, r26	; 0x09
    1916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <LCD_voidSendCommand+0xb4>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <LCD_voidSendCommand+0x132>
	else if (__tmp > 65535)
    193a:	6f 81       	ldd	r22, Y+7	; 0x07
    193c:	78 85       	ldd	r23, Y+8	; 0x08
    193e:	89 85       	ldd	r24, Y+9	; 0x09
    1940:	9a 85       	ldd	r25, Y+10	; 0x0a
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <LCD_voidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	6b 85       	ldd	r22, Y+11	; 0x0b
    1954:	7c 85       	ldd	r23, Y+12	; 0x0c
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
    197a:	0f c0       	rjmp	.+30     	; 0x199a <LCD_voidSendCommand+0x114>
    197c:	89 e1       	ldi	r24, 0x19	; 25
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c 83       	std	Y+4, r25	; 0x04
    1982:	8b 83       	std	Y+3, r24	; 0x03
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_voidSendCommand+0x102>
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <LCD_voidSendCommand+0xf6>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <LCD_voidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6f 81       	ldd	r22, Y+7	; 0x07
    19a6:	78 85       	ldd	r23, Y+8	; 0x08
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_voidSendCommand+0x13e>
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
}
    19d6:	2f 96       	adiw	r28, 0x0f	; 15
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <LCD_voidInit>:

void LCD_voidInit(void)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	2e 97       	sbiw	r28, 0x0e	; 14
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e2       	ldi	r26, 0x20	; 32
    1a02:	b2 e4       	ldi	r27, 0x42	; 66
    1a04:	8b 87       	std	Y+11, r24	; 0x0b
    1a06:	9c 87       	std	Y+12, r25	; 0x0c
    1a08:	ad 87       	std	Y+13, r26	; 0x0d
    1a0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	53 e4       	ldi	r21, 0x43	; 67
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8f 83       	std	Y+7, r24	; 0x07
    1a26:	98 87       	std	Y+8, r25	; 0x08
    1a28:	a9 87       	std	Y+9, r26	; 0x09
    1a2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_voidInit+0x66>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <LCD_voidInit+0xc6>
    1a90:	89 e1       	ldi	r24, 0x19	; 25
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_voidInit+0xb4>
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <LCD_voidInit+0xa8>
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_voidInit+0xf0>
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
	/*Wait more that 40 ms*/
	_delay_ms(40);
	LCD_voidSendCommand(Fun_Enable);
    1ae0:	88 e3       	ldi	r24, 0x38	; 56
    1ae2:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_voidSendCommand>

	LCD_voidSendCommand(DISPLAY_ON_OF);
    1ae6:	8c e0       	ldi	r24, 0x0C	; 12
    1ae8:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_voidSendCommand>

	LCD_voidSendCommand(DISPLAY_Clr);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_voidSendCommand>



}
    1af2:	2e 96       	adiw	r28, 0x0e	; 14
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <LCD_voidSendData>:


void LCD_voidSendData(u8 copy_u8Data)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	2f 97       	sbiw	r28, 0x0f	; 15
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	8f 87       	std	Y+15, r24	; 0x0f

	/*Setting RS pin to HIGH*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	/*Setting RW pin low for write*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>

	/*Set data pins*/
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Data);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b32:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e4       	ldi	r27, 0x40	; 64
    1b48:	8b 87       	std	Y+11, r24	; 0x0b
    1b4a:	9c 87       	std	Y+12, r25	; 0x0c
    1b4c:	ad 87       	std	Y+13, r26	; 0x0d
    1b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a e7       	ldi	r20, 0x7A	; 122
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8f 83       	std	Y+7, r24	; 0x07
    1b6a:	98 87       	std	Y+8, r25	; 0x08
    1b6c:	a9 87       	std	Y+9, r26	; 0x09
    1b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b70:	6f 81       	ldd	r22, Y+7	; 0x07
    1b72:	78 85       	ldd	r23, Y+8	; 0x08
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_voidSendData+0xee>
    1bd4:	89 e1       	ldi	r24, 0x19	; 25
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_voidSendData+0xdc>
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_voidSendData+0xd0>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfe:	78 85       	ldd	r23, Y+8	; 0x08
    1c00:	89 85       	ldd	r24, Y+9	; 0x09
    1c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_voidSendData+0x118>
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>


}
    1c2e:	2f 96       	adiw	r28, 0x0f	; 15
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <LCD_voidSendString>:

void LCD_voidSendString(const char* Copy_u8String)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <LCD_voidSendString+0x6>
    1c46:	0f 92       	push	r0
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	9b 83       	std	Y+3, r25	; 0x03
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8Counter=0;
    1c50:	19 82       	std	Y+1, r1	; 0x01
    1c52:	0e c0       	rjmp	.+28     	; 0x1c70 <LCD_voidSendString+0x30>
while(Copy_u8String[Local_u8Counter]!='\0')
{
    LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e2 0f       	add	r30, r18
    1c62:	f3 1f       	adc	r31, r19
    1c64:	80 81       	ld	r24, Z
    1c66:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendData>
    Local_u8Counter++;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* Copy_u8String)
{
u8 Local_u8Counter=0;
while(Copy_u8String[Local_u8Counter]!='\0')
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	e2 0f       	add	r30, r18
    1c7e:	f3 1f       	adc	r31, r19
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	39 f7       	brne	.-50     	; 0x1c54 <LCD_voidSendString+0x14>
{
    LCD_voidSendData(Copy_u8String[Local_u8Counter]);
    Local_u8Counter++;
}

}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8Xposition,u8 Copy_u8Yposition)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <LCD_voidGoToXY+0x6>
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	8a 83       	std	Y+2, r24	; 0x02
    1ca0:	6b 83       	std	Y+3, r22	; 0x03
  u8 Local_u8Address;

  if(Copy_u8Xposition==0)
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	88 23       	and	r24, r24
    1ca6:	19 f4       	brne	.+6      	; 0x1cae <LCD_voidGoToXY+0x1c>
  {
	  Local_u8Address=Copy_u8Yposition;
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	06 c0       	rjmp	.+12     	; 0x1cba <LCD_voidGoToXY+0x28>
  }
  else if(Copy_u8Xposition==1)
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	19 f4       	brne	.+6      	; 0x1cba <LCD_voidGoToXY+0x28>

  {
	  Local_u8Address=Copy_u8Yposition+0x40;
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	80 5c       	subi	r24, 0xC0	; 192
    1cb8:	89 83       	std	Y+1, r24	; 0x01
  }

  LCD_voidSendCommand(Local_u8Address|(1<<7));
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	80 68       	ori	r24, 0x80	; 128
    1cbe:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_voidSendCommand>

  //LCD_voidSendCommand(SET_BIT(Local_u8Address,7));
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(u32 copy_u32Number)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	27 97       	sbiw	r28, 0x07	; 7
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	6c 83       	std	Y+4, r22	; 0x04
    1ce4:	7d 83       	std	Y+5, r23	; 0x05
    1ce6:	8e 83       	std	Y+6, r24	; 0x06
    1ce8:	9f 83       	std	Y+7, r25	; 0x07
	u8 Local_u8Digit;
	u8 Local_u8Counter1=0;
    1cea:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8 Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8 Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf0:	ae 81       	ldd	r26, Y+6	; 0x06
    1cf2:	bf 81       	ldd	r27, Y+7	; 0x07
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	a1 05       	cpc	r26, r1
    1cf8:	b1 05       	cpc	r27, r1
    1cfa:	b9 f5       	brne	.+110    	; 0x1d6a <LCD_voidWriteNumber+0x9c>
	{
		LCD_voidSendData(Local_ArrayOfChar[0]);
    1cfc:	80 91 53 01 	lds	r24, 0x0153
    1d00:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendData>
    1d04:	4e c0       	rjmp	.+156    	; 0x1da2 <LCD_voidWriteNumber+0xd4>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	ae 81       	ldd	r26, Y+6	; 0x06
    1d0c:	bf 81       	ldd	r27, Y+7	; 0x07
    1d0e:	2a e0       	ldi	r18, 0x0A	; 10
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodsi4>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	ae 81       	ldd	r26, Y+6	; 0x06
    1d2a:	bf 81       	ldd	r27, Y+7	; 0x07
    1d2c:	2a e0       	ldi	r18, 0x0A	; 10
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__udivmodsi4>
    1d3c:	da 01       	movw	r26, r20
    1d3e:	c9 01       	movw	r24, r18
    1d40:	8c 83       	std	Y+4, r24	; 0x04
    1d42:	9d 83       	std	Y+5, r25	; 0x05
    1d44:	ae 83       	std	Y+6, r26	; 0x06
    1d46:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter1]=Local_ArrayOfChar[Local_u8Digit];
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	fc 01       	movw	r30, r24
    1d56:	ed 5a       	subi	r30, 0xAD	; 173
    1d58:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5a:	80 81       	ld	r24, Z
    1d5c:	f9 01       	movw	r30, r18
    1d5e:	e2 58       	subi	r30, 0x82	; 130
    1d60:	fe 4f       	sbci	r31, 0xFE	; 254
    1d62:	80 83       	st	Z, r24
			Local_u8Counter1++;
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	ae 81       	ldd	r26, Y+6	; 0x06
    1d70:	bf 81       	ldd	r27, Y+7	; 0x07
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	a1 05       	cpc	r26, r1
    1d76:	b1 05       	cpc	r27, r1
    1d78:	31 f6       	brne	.-116    	; 0x1d06 <LCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter1]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter1++;
		}

		for(Local_u8Counter2=Local_u8Counter1-1;Local_u8Counter2>=0;Local_u8Counter2--)
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	81 50       	subi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	0d c0       	rjmp	.+26     	; 0x1d9c <LCD_voidWriteNumber+0xce>
		{
			LCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	99 27       	eor	r25, r25
    1d86:	87 fd       	sbrc	r24, 7
    1d88:	90 95       	com	r25
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e2 58       	subi	r30, 0x82	; 130
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	80 81       	ld	r24, Z
    1d92:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter1]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter1++;
		}

		for(Local_u8Counter2=Local_u8Counter1-1;Local_u8Counter2>=0;Local_u8Counter2--)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	81 50       	subi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	88 23       	and	r24, r24
    1da0:	84 f7       	brge	.-32     	; 0x1d82 <LCD_voidWriteNumber+0xb4>
		{
			LCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    1da2:	27 96       	adiw	r28, 0x07	; 7
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_voidClearScreen>:

void LCD_voidClearScreen(void){
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(DISPLAY_Clr);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_voidSendCommand>
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <SPI_voidINITMaster>:
#include"SPI_REGISTER.h"
#include"SPI_INTERFACE.h"


void  SPI_voidINITMaster(void)
{      /*Master DIRECTION*/
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
	    DIO_u8SetPinDir(DIO_PORTB,DIO_PIN4,DIO_PIN_IN);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	64 e0       	ldi	r22, 0x04	; 4
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
		DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_HIGH);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	64 e0       	ldi	r22, 0x04	; 4
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
		DIO_u8SetPinDir(DIO_PORTB,DIO_PIN5,DIO_PIN_OUT);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	65 e0       	ldi	r22, 0x05	; 5
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
		DIO_u8SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_IN);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	66 e0       	ldi	r22, 0x06	; 6
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
		DIO_u8SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_OUT);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	67 e0       	ldi	r22, 0x07	; 7
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	/* Master Initialization */
	   SET_BIT(SPCR,SPCR_MSTR);
    1e02:	ad e2       	ldi	r26, 0x2D	; 45
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	ed e2       	ldi	r30, 0x2D	; 45
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 61       	ori	r24, 0x10	; 16
    1e0e:	8c 93       	st	X, r24

    /*Set Prescaler Devision Factor: Div_By_16*/
	   SET_BIT(SPCR,SPCR_SPR0);
    1e10:	ad e2       	ldi	r26, 0x2D	; 45
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	ed e2       	ldi	r30, 0x2D	; 45
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	81 60       	ori	r24, 0x01	; 1
    1e1c:	8c 93       	st	X, r24
	   CLR_BIT(SPCR,SPCR_SPR1);
    1e1e:	ad e2       	ldi	r26, 0x2D	; 45
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	ed e2       	ldi	r30, 0x2D	; 45
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	8d 7f       	andi	r24, 0xFD	; 253
    1e2a:	8c 93       	st	X, r24
	   CLR_BIT(SPSR,SPSR_SPI2X);
    1e2c:	ae e2       	ldi	r26, 0x2E	; 46
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ee e2       	ldi	r30, 0x2E	; 46
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8e 7f       	andi	r24, 0xFE	; 254
    1e38:	8c 93       	st	X, r24

	/* Set SPI Enable State*/
	   SET_BIT(SPCR,SPCR_SPE);
    1e3a:	ad e2       	ldi	r26, 0x2D	; 45
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ed e2       	ldi	r30, 0x2D	; 45
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 64       	ori	r24, 0x40	; 64
    1e46:	8c 93       	st	X, r24

}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <SPI_voidINITSlave>:

void  SPI_voidINITSlave(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	/** Slave Direction**/
	        DIO_u8SetPinDir(DIO_PORTB,DIO_PIN4,DIO_PIN_IN);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	64 e0       	ldi	r22, 0x04	; 4
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTB,DIO_PIN5,DIO_PIN_IN);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	65 e0       	ldi	r22, 0x05	; 5
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_OUT);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	66 e0       	ldi	r22, 0x06	; 6
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_IN);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	67 e0       	ldi	r22, 0x07	; 7
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
			DIO_u8SetPinDir(DIO_PORTA,DIO_PIN0,DIO_PIN_OUT);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>

	/* Slave Initialization */
	   CLR_BIT(SPCR,SPCR_MSTR);
    1e88:	ad e2       	ldi	r26, 0x2D	; 45
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	ed e2       	ldi	r30, 0x2D	; 45
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	8f 7e       	andi	r24, 0xEF	; 239
    1e94:	8c 93       	st	X, r24

    /* Set SPI Enable State*/
	   SET_BIT(SPCR,SPCR_SPE);
    1e96:	ad e2       	ldi	r26, 0x2D	; 45
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	ed e2       	ldi	r30, 0x2D	; 45
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 64       	ori	r24, 0x40	; 64
    1ea2:	8c 93       	st	X, r24

}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <SPI_u8Transceive>:

u8   SPI_u8Transceive(u8  Copy_u8Data)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	/*Sending The Data*/
        SPDR = Copy_u8Data;
    1eb6:	ef e2       	ldi	r30, 0x2F	; 47
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	80 83       	st	Z, r24

    /*Busy Waiting Until Complete Transfer */
       while(GET_BIT(SPSR,SPSR_SPIF)==0);
    1ebe:	ee e2       	ldi	r30, 0x2E	; 46
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 23       	and	r24, r24
    1ec6:	dc f7       	brge	.-10     	; 0x1ebe <SPI_u8Transceive+0x14>

   /*Get The Exchanged Data*/
       return SPDR;
    1ec8:	ef e2       	ldi	r30, 0x2F	; 47
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
}
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <spi_transmit>:

void spi_transmit(u8 val)
{SPDR=val;
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	ef e2       	ldi	r30, 0x2F	; 47
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPSR_SPIF)==0){}
    1eea:	ee e2       	ldi	r30, 0x2E	; 46
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 23       	and	r24, r24
    1ef2:	dc f7       	brge	.-10     	; 0x1eea <spi_transmit+0x14>

}
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <spi_receive>:
u8 spi_receive()
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,SPSR_SPIF)==0){}
    1f04:	ee e2       	ldi	r30, 0x2E	; 46
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 23       	and	r24, r24
    1f0c:	dc f7       	brge	.-10     	; 0x1f04 <spi_receive+0x8>
		return SPDR;
    1f0e:	ef e2       	ldi	r30, 0x2F	; 47
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
}
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <KPD_INIT>:
#include "DIO_INTERFACE.h"
#include <avr/io.h>
//#include <util/delay.h>
#include "keypad.h"
void KPD_INIT()
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	/* Initialize first 3 bits in keypad as output pins */
	DIO_u8SetPinDir(keypad_port,keypad_col0_pin,1);
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	65 e0       	ldi	r22, 0x05	; 5
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(keypad_port,keypad_col1_pin,1);
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	66 e0       	ldi	r22, 0x06	; 6
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(keypad_port,keypad_col2_pin,1);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	67 e0       	ldi	r22, 0x07	; 7
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	/* initalize second four bits in keypad as input pins */
	DIO_u8SetPinDir(keypad_port,keypad_row0_pin,0);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(keypad_port,keypad_row1_pin,0);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(keypad_port,keypad_row2_pin,0);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	63 e0       	ldi	r22, 0x03	; 3
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(keypad_port,keypad_row3_pin,0);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	/*connect pull up resistance to the input pins*/
	DIO_u8SetPortValue(keypad_port,0xff);
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	6f ef       	ldi	r22, 0xFF	; 255
    1f6c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <DIO_u8SetPortValue>
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey()
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <KPD_u8GetPressedKey+0x6>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <KPD_u8GetPressedKey+0x8>
    1f7e:	0f 92       	push	r0
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
	u8 nopress=0xff;
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8state;
	static u8 Local_u8KPDArr[rownum][colnum]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	static u8 Local_u8colarray[colnum]={keypad_col0_pin,keypad_col1_pin,keypad_col2_pin};
	static u8 Local_u8rowarray[rownum]={keypad_row0_pin,keypad_row1_pin,keypad_row2_pin,keypad_row3_pin};
	for(u8 Local_u8CoulmnIndex=0;Local_u8CoulmnIndex<colnum;Local_u8CoulmnIndex++)
    1f88:	1a 82       	std	Y+2, r1	; 0x02
    1f8a:	5e c0       	rjmp	.+188    	; 0x2048 <KPD_u8GetPressedKey+0xd2>
	{DIO_u8SetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_LOW);
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	fc 01       	movw	r30, r24
    1f94:	ef 59       	subi	r30, 0x9F	; 159
    1f96:	fe 4f       	sbci	r31, 0xFE	; 254
    1f98:	90 81       	ld	r25, Z
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	69 2f       	mov	r22, r25
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
		for(u8 Local_u8RowIndex=0;Local_u8RowIndex<rownum;Local_u8RowIndex++)
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	3d c0       	rjmp	.+122    	; 0x2022 <KPD_u8GetPressedKey+0xac>
		{
			DIO_u8GetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e3 5a       	subi	r30, 0xA3	; 163
    1fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb4:	90 81       	ld	r25, Z
    1fb6:	9e 01       	movw	r18, r28
    1fb8:	2c 5f       	subi	r18, 0xFC	; 252
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	69 2f       	mov	r22, r25
    1fc0:	a9 01       	movw	r20, r18
    1fc2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <DIO_u8GetPinValue>
			if(Local_u8state==DIO_LOW)
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	88 23       	and	r24, r24
    1fca:	41 f5       	brne	.+80     	; 0x201c <KPD_u8GetPressedKey+0xa6>
			{
				nopress=Local_u8KPDArr[Local_u8RowIndex][Local_u8CoulmnIndex];//put the selected pressed key to the retrurnval
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	48 2f       	mov	r20, r24
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	c9 01       	movw	r24, r18
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	82 0f       	add	r24, r18
    1fe0:	93 1f       	adc	r25, r19
    1fe2:	84 0f       	add	r24, r20
    1fe4:	95 1f       	adc	r25, r21
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	ec 59       	subi	r30, 0x9C	; 156
    1fea:	fe 4f       	sbci	r31, 0xFE	; 254
    1fec:	80 81       	ld	r24, Z
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <KPD_u8GetPressedKey+0x9a>
				while(Local_u8state==DIO_LOW)
				{
					DIO_u8GetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e3 5a       	subi	r30, 0xA3	; 163
    1ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffe:	90 81       	ld	r25, Z
    2000:	9e 01       	movw	r18, r28
    2002:	2c 5f       	subi	r18, 0xFC	; 252
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	69 2f       	mov	r22, r25
    200a:	a9 01       	movw	r20, r18
    200c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <DIO_u8GetPinValue>
		{
			DIO_u8GetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
			if(Local_u8state==DIO_LOW)
			{
				nopress=Local_u8KPDArr[Local_u8RowIndex][Local_u8CoulmnIndex];//put the selected pressed key to the retrurnval
				while(Local_u8state==DIO_LOW)
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	88 23       	and	r24, r24
    2014:	71 f3       	breq	.-36     	; 0x1ff2 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
				}
				return nopress;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	1c c0       	rjmp	.+56     	; 0x2054 <KPD_u8GetPressedKey+0xde>
	static u8 Local_u8KPDArr[rownum][colnum]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	static u8 Local_u8colarray[colnum]={keypad_col0_pin,keypad_col1_pin,keypad_col2_pin};
	static u8 Local_u8rowarray[rownum]={keypad_row0_pin,keypad_row1_pin,keypad_row2_pin,keypad_row3_pin};
	for(u8 Local_u8CoulmnIndex=0;Local_u8CoulmnIndex<colnum;Local_u8CoulmnIndex++)
	{DIO_u8SetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_LOW);
		for(u8 Local_u8RowIndex=0;Local_u8RowIndex<rownum;Local_u8RowIndex++)
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	08 f4       	brcc	.+2      	; 0x202a <KPD_u8GetPressedKey+0xb4>
    2028:	bf cf       	rjmp	.-130    	; 0x1fa8 <KPD_u8GetPressedKey+0x32>
					DIO_u8GetPinValue(keypad_port,Local_u8rowarray[Local_u8RowIndex],&Local_u8state);
				}
				return nopress;
			}
		}
		DIO_u8SetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_HIGH);
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	fc 01       	movw	r30, r24
    2032:	ef 59       	subi	r30, 0x9F	; 159
    2034:	fe 4f       	sbci	r31, 0xFE	; 254
    2036:	90 81       	ld	r25, Z
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	69 2f       	mov	r22, r25
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	u8 nopress=0xff;
	u8 Local_u8state;
	static u8 Local_u8KPDArr[rownum][colnum]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	static u8 Local_u8colarray[colnum]={keypad_col0_pin,keypad_col1_pin,keypad_col2_pin};
	static u8 Local_u8rowarray[rownum]={keypad_row0_pin,keypad_row1_pin,keypad_row2_pin,keypad_row3_pin};
	for(u8 Local_u8CoulmnIndex=0;Local_u8CoulmnIndex<colnum;Local_u8CoulmnIndex++)
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	08 f4       	brcc	.+2      	; 0x2050 <KPD_u8GetPressedKey+0xda>
    204e:	9e cf       	rjmp	.-196    	; 0x1f8c <KPD_u8GetPressedKey+0x16>
				return nopress;
			}
		}
		DIO_u8SetPinValue(keypad_port,Local_u8colarray[Local_u8CoulmnIndex],DIO_HIGH);
	}
	return nopress;//return the pressed key in case of key pressed or return 0xff in case of no key pressed
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <main>:


u8 pass[4]={'1','2','3','4'};

int main()
{
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	cb 54       	subi	r28, 0x4B	; 75
    2074:	d0 40       	sbci	r29, 0x00	; 0
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
	/*********************************** Drivers Initialization ***************************/
	LCD_voidInit();
    2080:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <LCD_voidInit>
	KPD_INIT();
    2084:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <KPD_INIT>
	SPI_voidINITMaster();
    2088:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <SPI_voidINITMaster>

	/************************************** WELCOME MASSEGE ********************************/
	LCD_voidSendString("HOLA,");
    208c:	80 e6       	ldi	r24, 0x60	; 96
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	LCD_voidGoToXY(1,0);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
	LCD_voidSendString("IN UR SMART HOME");
    209c:	86 e6       	ldi	r24, 0x66	; 102
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
    20a4:	fe 01       	movw	r30, r28
    20a6:	ed 5b       	subi	r30, 0xBD	; 189
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	aa ef       	ldi	r26, 0xFA	; 250
    20b0:	b4 e4       	ldi	r27, 0x44	; 68
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	8e 01       	movw	r16, r28
    20bc:	01 5c       	subi	r16, 0xC1	; 193
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	fe 01       	movw	r30, r28
    20c2:	ed 5b       	subi	r30, 0xBD	; 189
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	f8 01       	movw	r30, r16
    20e0:	80 83       	st	Z, r24
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	a2 83       	std	Z+2, r26	; 0x02
    20e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e8:	fe 01       	movw	r30, r28
    20ea:	ff 96       	adiw	r30, 0x3f	; 63
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <main+0xa8>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e af       	std	Y+62, r25	; 0x3e
    210a:	8d af       	std	Y+61, r24	; 0x3d
    210c:	46 c0       	rjmp	.+140    	; 0x219a <main+0x134>
	else if (__tmp > 65535)
    210e:	fe 01       	movw	r30, r28
    2110:	ff 96       	adiw	r30, 0x3f	; 63
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	64 f5       	brge	.+88     	; 0x2182 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	fe 01       	movw	r30, r28
    212c:	ed 5b       	subi	r30, 0xBD	; 189
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e af       	std	Y+62, r25	; 0x3e
    2156:	8d af       	std	Y+61, r24	; 0x3d
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <main+0x112>
    215a:	89 e1       	ldi	r24, 0x19	; 25
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c af       	std	Y+60, r25	; 0x3c
    2160:	8b af       	std	Y+59, r24	; 0x3b
    2162:	8b ad       	ldd	r24, Y+59	; 0x3b
    2164:	9c ad       	ldd	r25, Y+60	; 0x3c
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <main+0x100>
    216a:	9c af       	std	Y+60, r25	; 0x3c
    216c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2170:	9e ad       	ldd	r25, Y+62	; 0x3e
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9e af       	std	Y+62, r25	; 0x3e
    2176:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8d ad       	ldd	r24, Y+61	; 0x3d
    217a:	9e ad       	ldd	r25, Y+62	; 0x3e
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <main+0xf4>
    2180:	16 c0       	rjmp	.+44     	; 0x21ae <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	fe 01       	movw	r30, r28
    2184:	ff 96       	adiw	r30, 0x3f	; 63
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9e af       	std	Y+62, r25	; 0x3e
    2198:	8d af       	std	Y+61, r24	; 0x3d
    219a:	8d ad       	ldd	r24, Y+61	; 0x3d
    219c:	9e ad       	ldd	r25, Y+62	; 0x3e
    219e:	9a af       	std	Y+58, r25	; 0x3a
    21a0:	89 af       	std	Y+57, r24	; 0x39
    21a2:	89 ad       	ldd	r24, Y+57	; 0x39
    21a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <main+0x140>
    21aa:	9a af       	std	Y+58, r25	; 0x3a
    21ac:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);
	LCD_voidClearScreen();
    21ae:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
	/***************************************  Enter Password *********************************/
	u8 Local_Counter=0,Local_Counter1=3,Local_flag=0;
    21b2:	fe 01       	movw	r30, r28
    21b4:	e5 5b       	subi	r30, 0xB5	; 181
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	10 82       	st	Z, r1
    21ba:	fe 01       	movw	r30, r28
    21bc:	e6 5b       	subi	r30, 0xB6	; 182
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	83 e0       	ldi	r24, 0x03	; 3
    21c2:	80 83       	st	Z, r24
    21c4:	fe 01       	movw	r30, r28
    21c6:	e7 5b       	subi	r30, 0xB7	; 183
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	10 82       	st	Z, r1
	while(1){
		LCD_voidClearScreen();
    21cc:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>

		u8 Local_u8pass;
		for(Local_Counter1=3;Local_Counter1>0;Local_Counter1--){
    21d0:	fe 01       	movw	r30, r28
    21d2:	e6 5b       	subi	r30, 0xB6	; 182
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	80 83       	st	Z, r24
    21da:	d3 c1       	rjmp	.+934    	; 0x2582 <main+0x51c>
			LCD_voidSendString("Enter Your Pass");
    21dc:	87 e7       	ldi	r24, 0x77	; 119
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
			LCD_voidGoToXY(1,0);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
			for(Local_Counter=0;Local_Counter<4;Local_Counter++){
    21ec:	fe 01       	movw	r30, r28
    21ee:	e5 5b       	subi	r30, 0xB5	; 181
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	10 82       	st	Z, r1
    21f4:	2d c0       	rjmp	.+90     	; 0x2250 <main+0x1ea>

				do{
					Local_u8pass=KPD_u8GetPressedKey();
    21f6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    21fa:	fe 01       	movw	r30, r28
    21fc:	e8 5b       	subi	r30, 0xB8	; 184
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 83       	st	Z, r24

				}
				while(Local_u8pass==0xff );
    2202:	fe 01       	movw	r30, r28
    2204:	e8 5b       	subi	r30, 0xB8	; 184
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	8f 3f       	cpi	r24, 0xFF	; 255
    220c:	a1 f3       	breq	.-24     	; 0x21f6 <main+0x190>
				if(pass[Local_Counter]!=Local_u8pass)
    220e:	fe 01       	movw	r30, r28
    2210:	e5 5b       	subi	r30, 0xB5	; 181
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	fc 01       	movw	r30, r24
    221c:	e0 59       	subi	r30, 0x90	; 144
    221e:	fe 4f       	sbci	r31, 0xFE	; 254
    2220:	90 81       	ld	r25, Z
    2222:	fe 01       	movw	r30, r28
    2224:	e8 5b       	subi	r30, 0xB8	; 184
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	98 17       	cp	r25, r24
    222c:	29 f0       	breq	.+10     	; 0x2238 <main+0x1d2>
				{
					Local_flag=1;
    222e:	fe 01       	movw	r30, r28
    2230:	e7 5b       	subi	r30, 0xB7	; 183
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	80 83       	st	Z, r24

				}

				LCD_voidSendData('*');
    2238:	8a e2       	ldi	r24, 0x2A	; 42
    223a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendData>

		u8 Local_u8pass;
		for(Local_Counter1=3;Local_Counter1>0;Local_Counter1--){
			LCD_voidSendString("Enter Your Pass");
			LCD_voidGoToXY(1,0);
			for(Local_Counter=0;Local_Counter<4;Local_Counter++){
    223e:	de 01       	movw	r26, r28
    2240:	a5 5b       	subi	r26, 0xB5	; 181
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e5 5b       	subi	r30, 0xB5	; 181
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	8c 93       	st	X, r24
    2250:	fe 01       	movw	r30, r28
    2252:	e5 5b       	subi	r30, 0xB5	; 181
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	84 30       	cpi	r24, 0x04	; 4
    225a:	68 f2       	brcs	.-102    	; 0x21f6 <main+0x190>

				}

				LCD_voidSendData('*');
			}
			if(Local_flag==1){
    225c:	fe 01       	movw	r30, r28
    225e:	e7 5b       	subi	r30, 0xB7	; 183
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	09 f0       	breq	.+2      	; 0x226a <main+0x204>
    2268:	81 c0       	rjmp	.+258    	; 0x236c <main+0x306>
				LCD_voidGoToXY(1,0);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
				LCD_voidSendString("WRONG PASSWORD");
    2272:	87 e8       	ldi	r24, 0x87	; 135
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	aa ef       	ldi	r26, 0xFA	; 250
    2280:	b4 e4       	ldi	r27, 0x44	; 68
    2282:	8d ab       	std	Y+53, r24	; 0x35
    2284:	9e ab       	std	Y+54, r25	; 0x36
    2286:	af ab       	std	Y+55, r26	; 0x37
    2288:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6d a9       	ldd	r22, Y+53	; 0x35
    228c:	7e a9       	ldd	r23, Y+54	; 0x36
    228e:	8f a9       	ldd	r24, Y+55	; 0x37
    2290:	98 ad       	ldd	r25, Y+56	; 0x38
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a e7       	ldi	r20, 0x7A	; 122
    2298:	53 e4       	ldi	r21, 0x43	; 67
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	89 ab       	std	Y+49, r24	; 0x31
    22a4:	9a ab       	std	Y+50, r25	; 0x32
    22a6:	ab ab       	std	Y+51, r26	; 0x33
    22a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22aa:	69 a9       	ldd	r22, Y+49	; 0x31
    22ac:	7a a9       	ldd	r23, Y+50	; 0x32
    22ae:	8b a9       	ldd	r24, Y+51	; 0x33
    22b0:	9c a9       	ldd	r25, Y+52	; 0x34
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <main+0x266>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	98 ab       	std	Y+48, r25	; 0x30
    22c8:	8f a7       	std	Y+47, r24	; 0x2f
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <main+0x2e4>
	else if (__tmp > 65535)
    22cc:	69 a9       	ldd	r22, Y+49	; 0x31
    22ce:	7a a9       	ldd	r23, Y+50	; 0x32
    22d0:	8b a9       	ldd	r24, Y+51	; 0x33
    22d2:	9c a9       	ldd	r25, Y+52	; 0x34
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <main+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6d a9       	ldd	r22, Y+53	; 0x35
    22e6:	7e a9       	ldd	r23, Y+54	; 0x36
    22e8:	8f a9       	ldd	r24, Y+55	; 0x37
    22ea:	98 ad       	ldd	r25, Y+56	; 0x38
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	98 ab       	std	Y+48, r25	; 0x30
    230a:	8f a7       	std	Y+47, r24	; 0x2f
    230c:	0f c0       	rjmp	.+30     	; 0x232c <main+0x2c6>
    230e:	89 e1       	ldi	r24, 0x19	; 25
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9e a7       	std	Y+46, r25	; 0x2e
    2314:	8d a7       	std	Y+45, r24	; 0x2d
    2316:	8d a5       	ldd	r24, Y+45	; 0x2d
    2318:	9e a5       	ldd	r25, Y+46	; 0x2e
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <main+0x2b4>
    231e:	9e a7       	std	Y+46, r25	; 0x2e
    2320:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	8f a5       	ldd	r24, Y+47	; 0x2f
    2324:	98 a9       	ldd	r25, Y+48	; 0x30
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	8f a5       	ldd	r24, Y+47	; 0x2f
    232e:	98 a9       	ldd	r25, Y+48	; 0x30
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <main+0x2a8>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <main+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	69 a9       	ldd	r22, Y+49	; 0x31
    2338:	7a a9       	ldd	r23, Y+50	; 0x32
    233a:	8b a9       	ldd	r24, Y+51	; 0x33
    233c:	9c a9       	ldd	r25, Y+52	; 0x34
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	98 ab       	std	Y+48, r25	; 0x30
    2348:	8f a7       	std	Y+47, r24	; 0x2f
    234a:	8f a5       	ldd	r24, Y+47	; 0x2f
    234c:	98 a9       	ldd	r25, Y+48	; 0x30
    234e:	9c a7       	std	Y+44, r25	; 0x2c
    2350:	8b a7       	std	Y+43, r24	; 0x2b
    2352:	8b a5       	ldd	r24, Y+43	; 0x2b
    2354:	9c a5       	ldd	r25, Y+44	; 0x2c
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <main+0x2f0>
    235a:	9c a7       	std	Y+44, r25	; 0x2c
    235c:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2000);
				LCD_voidClearScreen();
    235e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
				Local_flag=0;
    2362:	fe 01       	movw	r30, r28
    2364:	e7 5b       	subi	r30, 0xB7	; 183
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	10 82       	st	Z, r1
    236a:	02 c1       	rjmp	.+516    	; 0x2570 <main+0x50a>
			}
			else if(Local_flag==0)
    236c:	fe 01       	movw	r30, r28
    236e:	e7 5b       	subi	r30, 0xB7	; 183
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	09 f0       	breq	.+2      	; 0x237a <main+0x314>
    2378:	fb c0       	rjmp	.+502    	; 0x2570 <main+0x50a>
			{
				LCD_voidClearScreen();
    237a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
				LCD_voidSendString("HEY!!");
    237e:	86 e9       	ldi	r24, 0x96	; 150
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
				LCD_voidGoToXY(1,0);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
				LCD_voidSendString("YOU'Re Good Man");
    238e:	8c e9       	ldi	r24, 0x9C	; 156
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
				 motorinit();
    2396:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <motorinit>
						clockwise();
    239a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <clockwise>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	aa ef       	ldi	r26, 0xFA	; 250
    23a4:	b4 e4       	ldi	r27, 0x44	; 68
    23a6:	8f a3       	std	Y+39, r24	; 0x27
    23a8:	98 a7       	std	Y+40, r25	; 0x28
    23aa:	a9 a7       	std	Y+41, r26	; 0x29
    23ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ae:	6f a1       	ldd	r22, Y+39	; 0x27
    23b0:	78 a5       	ldd	r23, Y+40	; 0x28
    23b2:	89 a5       	ldd	r24, Y+41	; 0x29
    23b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	4a e7       	ldi	r20, 0x7A	; 122
    23bc:	53 e4       	ldi	r21, 0x43	; 67
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8b a3       	std	Y+35, r24	; 0x23
    23c8:	9c a3       	std	Y+36, r25	; 0x24
    23ca:	ad a3       	std	Y+37, r26	; 0x25
    23cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ce:	6b a1       	ldd	r22, Y+35	; 0x23
    23d0:	7c a1       	ldd	r23, Y+36	; 0x24
    23d2:	8d a1       	ldd	r24, Y+37	; 0x25
    23d4:	9e a1       	ldd	r25, Y+38	; 0x26
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <main+0x38a>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9a a3       	std	Y+34, r25	; 0x22
    23ec:	89 a3       	std	Y+33, r24	; 0x21
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <main+0x408>
	else if (__tmp > 65535)
    23f0:	6b a1       	ldd	r22, Y+35	; 0x23
    23f2:	7c a1       	ldd	r23, Y+36	; 0x24
    23f4:	8d a1       	ldd	r24, Y+37	; 0x25
    23f6:	9e a1       	ldd	r25, Y+38	; 0x26
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	3f ef       	ldi	r19, 0xFF	; 255
    23fc:	4f e7       	ldi	r20, 0x7F	; 127
    23fe:	57 e4       	ldi	r21, 0x47	; 71
    2400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2404:	18 16       	cp	r1, r24
    2406:	4c f5       	brge	.+82     	; 0x245a <main+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2408:	6f a1       	ldd	r22, Y+39	; 0x27
    240a:	78 a5       	ldd	r23, Y+40	; 0x28
    240c:	89 a5       	ldd	r24, Y+41	; 0x29
    240e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9a a3       	std	Y+34, r25	; 0x22
    242e:	89 a3       	std	Y+33, r24	; 0x21
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <main+0x3ea>
    2432:	89 e1       	ldi	r24, 0x19	; 25
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	98 a3       	std	Y+32, r25	; 0x20
    2438:	8f 8f       	std	Y+31, r24	; 0x1f
    243a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    243c:	98 a1       	ldd	r25, Y+32	; 0x20
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <main+0x3d8>
    2442:	98 a3       	std	Y+32, r25	; 0x20
    2444:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	89 a1       	ldd	r24, Y+33	; 0x21
    2448:	9a a1       	ldd	r25, Y+34	; 0x22
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	9a a1       	ldd	r25, Y+34	; 0x22
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	69 f7       	brne	.-38     	; 0x2432 <main+0x3cc>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <main+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	6b a1       	ldd	r22, Y+35	; 0x23
    245c:	7c a1       	ldd	r23, Y+36	; 0x24
    245e:	8d a1       	ldd	r24, Y+37	; 0x25
    2460:	9e a1       	ldd	r25, Y+38	; 0x26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9a a3       	std	Y+34, r25	; 0x22
    246c:	89 a3       	std	Y+33, r24	; 0x21
    246e:	89 a1       	ldd	r24, Y+33	; 0x21
    2470:	9a a1       	ldd	r25, Y+34	; 0x22
    2472:	9e 8f       	std	Y+30, r25	; 0x1e
    2474:	8d 8f       	std	Y+29, r24	; 0x1d
    2476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2478:	9e 8d       	ldd	r25, Y+30	; 0x1e
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <main+0x414>
    247e:	9e 8f       	std	Y+30, r25	; 0x1e
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						anticlock();
    2482:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <anticlock>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	aa ef       	ldi	r26, 0xFA	; 250
    248c:	b4 e4       	ldi	r27, 0x44	; 68
    248e:	89 8f       	std	Y+25, r24	; 0x19
    2490:	9a 8f       	std	Y+26, r25	; 0x1a
    2492:	ab 8f       	std	Y+27, r26	; 0x1b
    2494:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	69 8d       	ldd	r22, Y+25	; 0x19
    2498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a e7       	ldi	r20, 0x7A	; 122
    24a4:	53 e4       	ldi	r21, 0x43	; 67
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8d 8b       	std	Y+21, r24	; 0x15
    24b0:	9e 8b       	std	Y+22, r25	; 0x16
    24b2:	af 8b       	std	Y+23, r26	; 0x17
    24b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <main+0x472>
		__ticks = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <main+0x4f0>
	else if (__tmp > 65535)
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	4c f5       	brge	.+82     	; 0x2542 <main+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	69 8d       	ldd	r22, Y+25	; 0x19
    24f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <main+0x4d2>
    251a:	89 e1       	ldi	r24, 0x19	; 25
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9a 8b       	std	Y+18, r25	; 0x12
    2520:	89 8b       	std	Y+17, r24	; 0x11
    2522:	89 89       	ldd	r24, Y+17	; 0x11
    2524:	9a 89       	ldd	r25, Y+18	; 0x12
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <main+0x4c0>
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	9c 89       	ldd	r25, Y+20	; 0x14
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	69 f7       	brne	.-38     	; 0x251a <main+0x4b4>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <main+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2542:	6d 89       	ldd	r22, Y+21	; 0x15
    2544:	7e 89       	ldd	r23, Y+22	; 0x16
    2546:	8f 89       	ldd	r24, Y+23	; 0x17
    2548:	98 8d       	ldd	r25, Y+24	; 0x18
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	98 8b       	std	Y+16, r25	; 0x10
    255c:	8f 87       	std	Y+15, r24	; 0x0f
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	98 89       	ldd	r25, Y+16	; 0x10
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <main+0x4fc>
    2566:	98 8b       	std	Y+16, r25	; 0x10
    2568:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2000);
						stop();
    256a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <stop>
    256e:	10 c0       	rjmp	.+32     	; 0x2590 <main+0x52a>
	u8 Local_Counter=0,Local_Counter1=3,Local_flag=0;
	while(1){
		LCD_voidClearScreen();

		u8 Local_u8pass;
		for(Local_Counter1=3;Local_Counter1>0;Local_Counter1--){
    2570:	de 01       	movw	r26, r28
    2572:	a6 5b       	subi	r26, 0xB6	; 182
    2574:	bf 4f       	sbci	r27, 0xFF	; 255
    2576:	fe 01       	movw	r30, r28
    2578:	e6 5b       	subi	r30, 0xB6	; 182
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	81 50       	subi	r24, 0x01	; 1
    2580:	8c 93       	st	X, r24
    2582:	fe 01       	movw	r30, r28
    2584:	e6 5b       	subi	r30, 0xB6	; 182
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	88 23       	and	r24, r24
    258c:	09 f0       	breq	.+2      	; 0x2590 <main+0x52a>
    258e:	26 ce       	rjmp	.-948    	; 0x21dc <main+0x176>
						stop();
				break;
			}
		}

		if(Local_Counter1==0)
    2590:	fe 01       	movw	r30, r28
    2592:	e6 5b       	subi	r30, 0xB6	; 182
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	88 23       	and	r24, r24
    259a:	09 f0       	breq	.+2      	; 0x259e <main+0x538>
    259c:	bb c0       	rjmp	.+374    	; 0x2714 <main+0x6ae>
		{
			LCD_voidGoToXY(0,0);
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
			LCD_voidSendString("SORRY,");
    25a6:	8c ea       	ldi	r24, 0xAC	; 172
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
			LCD_voidGoToXY(1,0);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
			LCD_voidSendString("You Tried 3 Times");
    25b6:	83 eb       	ldi	r24, 0xB3	; 179
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
			            LCD_voidClearScreen();
    25be:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
			            LCD_voidSendString("ALARM ON");
    25c2:	85 ec       	ldi	r24, 0xC5	; 197
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
			            LCD_voidGoToXY(1,0);
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
			            LCD_voidSendString("Press # to Stop");
    25d2:	8e ec       	ldi	r24, 0xCE	; 206
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
			            DIO_u8SetPinDir(DIO_PORTD, DIO_PIN5, DIO_PIN_OUT);
    25da:	83 e0       	ldi	r24, 0x03	; 3
    25dc:	65 e0       	ldi	r22, 0x05	; 5
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
			            DIO_u8SetPinValue(DIO_PORTD, DIO_PIN5, DIO_HIGH);
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	65 e0       	ldi	r22, 0x05	; 5
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>

			            u8 key;
			            while(1)
			            {
			                key = KPD_u8GetPressedKey();
    25ee:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    25f2:	fe 01       	movw	r30, r28
    25f4:	e9 5b       	subi	r30, 0xB9	; 185
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 83       	st	Z, r24
			                if(key == '#')
    25fa:	fe 01       	movw	r30, r28
    25fc:	e9 5b       	subi	r30, 0xB9	; 185
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	83 32       	cpi	r24, 0x23	; 35
    2604:	a1 f7       	brne	.-24     	; 0x25ee <main+0x588>
			                {
			                    DIO_u8SetPinValue(DIO_PORTD, DIO_PIN5, DIO_LOW);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	65 e0       	ldi	r22, 0x05	; 5
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
			                    LCD_voidClearScreen();
    2610:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
			                    LCD_voidSendString("ALARM OFF");
    2614:	8e ed       	ldi	r24, 0xDE	; 222
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	aa ef       	ldi	r26, 0xFA	; 250
    2622:	b4 e4       	ldi	r27, 0x44	; 68
    2624:	8b 87       	std	Y+11, r24	; 0x0b
    2626:	9c 87       	std	Y+12, r25	; 0x0c
    2628:	ad 87       	std	Y+13, r26	; 0x0d
    262a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262c:	6b 85       	ldd	r22, Y+11	; 0x0b
    262e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2630:	8d 85       	ldd	r24, Y+13	; 0x0d
    2632:	9e 85       	ldd	r25, Y+14	; 0x0e
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a e7       	ldi	r20, 0x7A	; 122
    263a:	53 e4       	ldi	r21, 0x43	; 67
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8f 83       	std	Y+7, r24	; 0x07
    2646:	98 87       	std	Y+8, r25	; 0x08
    2648:	a9 87       	std	Y+9, r26	; 0x09
    264a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    264c:	6f 81       	ldd	r22, Y+7	; 0x07
    264e:	78 85       	ldd	r23, Y+8	; 0x08
    2650:	89 85       	ldd	r24, Y+9	; 0x09
    2652:	9a 85       	ldd	r25, Y+10	; 0x0a
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	2c f4       	brge	.+10     	; 0x266e <main+0x608>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	3f c0       	rjmp	.+126    	; 0x26ec <main+0x686>
	else if (__tmp > 65535)
    266e:	6f 81       	ldd	r22, Y+7	; 0x07
    2670:	78 85       	ldd	r23, Y+8	; 0x08
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	4c f5       	brge	.+82     	; 0x26d8 <main+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	6b 85       	ldd	r22, Y+11	; 0x0b
    2688:	7c 85       	ldd	r23, Y+12	; 0x0c
    268a:	8d 85       	ldd	r24, Y+13	; 0x0d
    268c:	9e 85       	ldd	r25, Y+14	; 0x0e
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	0f c0       	rjmp	.+30     	; 0x26ce <main+0x668>
    26b0:	89 e1       	ldi	r24, 0x19	; 25
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9c 83       	std	Y+4, r25	; 0x04
    26b6:	8b 83       	std	Y+3, r24	; 0x03
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	9c 81       	ldd	r25, Y+4	; 0x04
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <main+0x656>
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	8d 81       	ldd	r24, Y+5	; 0x05
    26d0:	9e 81       	ldd	r25, Y+6	; 0x06
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	69 f7       	brne	.-38     	; 0x26b0 <main+0x64a>
    26d6:	14 c0       	rjmp	.+40     	; 0x2700 <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	6f 81       	ldd	r22, Y+7	; 0x07
    26da:	78 85       	ldd	r23, Y+8	; 0x08
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <main+0x692>
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
			                    _delay_ms(2000);
			                    break;
			                }
			            }
			            Local_Counter1 = 3;
    2700:	fe 01       	movw	r30, r28
    2702:	e6 5b       	subi	r30, 0xB6	; 182
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	80 83       	st	Z, r24
			            Local_flag = 0;
    270a:	fe 01       	movw	r30, r28
    270c:	e7 5b       	subi	r30, 0xB7	; 183
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	10 82       	st	Z, r1
    2712:	5c cd       	rjmp	.-1352   	; 0x21cc <main+0x166>
			            continue;
			        }
			break;
		}

		Options();
    2714:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <Options>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0

	}
    271c:	c5 5b       	subi	r28, 0xB5	; 181
    271e:	df 4f       	sbci	r29, 0xFF	; 255
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	08 95       	ret

00002734 <ROOM_OPTIONS>:
#include "keypad.h"
#include "main_confgration.h"
#include "SPI_INTERFACE.h"
#include <util/delay.h>
void ROOM_OPTIONS(u8 roomnum)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	00 d0       	rcall	.+0      	; 0x273a <ROOM_OPTIONS+0x6>
    273a:	00 d0       	rcall	.+0      	; 0x273c <ROOM_OPTIONS+0x8>
    273c:	0f 92       	push	r0
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_press=0;
    2744:	1c 82       	std	Y+4, r1	; 0x04


	if(roomnum==ROOM1)
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	81 33       	cpi	r24, 0x31	; 49
    274a:	59 f4       	brne	.+22     	; 0x2762 <ROOM_OPTIONS+0x2e>
	{
		DIO_u8SetPinDir(DIO_PORTD,DIO_PIN3,DIO_PIN_OUT);
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	63 e0       	ldi	r22, 0x03	; 3
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
		DIO_u8SetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);}
    2756:	83 e0       	ldi	r24, 0x03	; 3
    2758:	63 e0       	ldi	r22, 0x03	; 3
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    2760:	0d c0       	rjmp	.+26     	; 0x277c <ROOM_OPTIONS+0x48>
	else if(roomnum==ROOM2)
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	82 33       	cpi	r24, 0x32	; 50
    2766:	51 f4       	brne	.+20     	; 0x277c <ROOM_OPTIONS+0x48>
	{
		DIO_u8SetPinDir(DIO_PORTD,DIO_PIN4,DIO_PIN_OUT);
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	64 e0       	ldi	r22, 0x04	; 4
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
		DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_HIGH);
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	64 e0       	ldi	r22, 0x04	; 4
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	}
	/********************************************* Choose Device *********************************************/
	LCD_voidClearScreen();
    277c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
	LCD_voidSendString("1-LIGHT ");
    2780:	88 ee       	ldi	r24, 0xE8	; 232
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	LCD_voidGoToXY(0,9);
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	69 e0       	ldi	r22, 0x09	; 9
    278c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
	LCD_voidSendString("2-AC ");
    2790:	81 ef       	ldi	r24, 0xF1	; 241
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	LCD_voidGoToXY(1,0);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
	LCD_voidSendString("3-TV ");
    27a0:	87 ef       	ldi	r24, 0xF7	; 247
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	LCD_voidGoToXY(1,9);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	69 e0       	ldi	r22, 0x09	; 9
    27ac:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
	LCD_voidSendString("4-Rooms");
    27b0:	8d ef       	ldi	r24, 0xFD	; 253
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	do
	{
		Local_press=KPD_u8GetPressedKey();
    27b8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    27bc:	8c 83       	std	Y+4, r24	; 0x04

	}
	while(Local_press==0xff );
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	8f 3f       	cpi	r24, 0xFF	; 255
    27c2:	d1 f3       	breq	.-12     	; 0x27b8 <ROOM_OPTIONS+0x84>

	spi_transmit(Local_press);
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <spi_transmit>
	            /****************************** CONTROL Lighting **********************************/
	if(Local_press=='1')
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	81 33       	cpi	r24, 0x31	; 49
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <ROOM_OPTIONS+0x9e>
    27d0:	47 c0       	rjmp	.+142    	; 0x2860 <ROOM_OPTIONS+0x12c>
	{
		u8 Local_u8RecieveStatus=0;
    27d2:	1b 82       	std	Y+3, r1	; 0x03

		LCD_voidClearScreen();
    27d4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
	                   	/******************      Current Status    *******************/
		Local_u8RecieveStatus=SPI_u8Transceive(10);
    27d8:	8a e0       	ldi	r24, 0x0A	; 10
    27da:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <SPI_u8Transceive>
    27de:	8b 83       	std	Y+3, r24	; 0x03
		LCD_voidSendString("Status:" );
    27e0:	85 e0       	ldi	r24, 0x05	; 5
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		if(Local_u8RecieveStatus==1)
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	29 f4       	brne	.+10     	; 0x27f8 <ROOM_OPTIONS+0xc4>
		{
			LCD_voidSendString("ON");
    27ee:	8d e0       	ldi	r24, 0x0D	; 13
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
    27f6:	07 c0       	rjmp	.+14     	; 0x2806 <ROOM_OPTIONS+0xd2>
		}
		else if(Local_u8RecieveStatus==0)
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	88 23       	and	r24, r24
    27fc:	21 f4       	brne	.+8      	; 0x2806 <ROOM_OPTIONS+0xd2>
		{
			LCD_voidSendString("OFF");
    27fe:	80 e1       	ldi	r24, 0x10	; 16
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		}

	                 	/******************      Choose Status    *******************/

		LCD_voidGoToXY(1,0);
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
		LCD_voidSendString("1-ON ");
    280e:	84 e1       	ldi	r24, 0x14	; 20
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		LCD_voidGoToXY(1,7);
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	67 e0       	ldi	r22, 0x07	; 7
    281a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
		LCD_voidSendString("2-OFF");
    281e:	8a e1       	ldi	r24, 0x1A	; 26
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		do
		{
			Local_press=KPD_u8GetPressedKey();
    2826:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    282a:	8c 83       	std	Y+4, r24	; 0x04

		} while(Local_press==0xff );
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	8f 3f       	cpi	r24, 0xFF	; 255
    2830:	d1 f3       	breq	.-12     	; 0x2826 <ROOM_OPTIONS+0xf2>


		spi_transmit(Local_press);
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <spi_transmit>
		if(roomnum==ROOM1)
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	81 33       	cpi	r24, 0x31	; 49
    283c:	31 f4       	brne	.+12     	; 0x284a <ROOM_OPTIONS+0x116>
			{
				DIO_u8SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);}
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	63 e0       	ldi	r22, 0x03	; 3
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    2848:	08 c0       	rjmp	.+16     	; 0x285a <ROOM_OPTIONS+0x126>
			else if(roomnum==ROOM2)
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	82 33       	cpi	r24, 0x32	; 50
    284e:	29 f4       	brne	.+10     	; 0x285a <ROOM_OPTIONS+0x126>
			{

				DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
			}

		Options();
    285a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <Options>
    285e:	ac c0       	rjmp	.+344    	; 0x29b8 <ROOM_OPTIONS+0x284>


	}
            	/****************************** CONTROL Air_Con **********************************/
	else if(Local_press=='2')
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	82 33       	cpi	r24, 0x32	; 50
    2864:	09 f0       	breq	.+2      	; 0x2868 <ROOM_OPTIONS+0x134>
    2866:	47 c0       	rjmp	.+142    	; 0x28f6 <ROOM_OPTIONS+0x1c2>
	{
		u8 Local_u8RecieveStatus=0;
    2868:	1a 82       	std	Y+2, r1	; 0x02
		LCD_voidClearScreen();
    286a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
		                    /******************      Current Status    *******************/
		Local_u8RecieveStatus=SPI_u8Transceive(10);
    286e:	8a e0       	ldi	r24, 0x0A	; 10
    2870:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <SPI_u8Transceive>
    2874:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendString("Status:" );
    2876:	85 e0       	ldi	r24, 0x05	; 5
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		if(Local_u8RecieveStatus==1)
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	29 f4       	brne	.+10     	; 0x288e <ROOM_OPTIONS+0x15a>
		{
			LCD_voidSendString("ON");
    2884:	8d e0       	ldi	r24, 0x0D	; 13
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
    288c:	07 c0       	rjmp	.+14     	; 0x289c <ROOM_OPTIONS+0x168>
		}
		else if(Local_u8RecieveStatus==0)
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	88 23       	and	r24, r24
    2892:	21 f4       	brne	.+8      	; 0x289c <ROOM_OPTIONS+0x168>
		{
			LCD_voidSendString("OFF");
    2894:	80 e1       	ldi	r24, 0x10	; 16
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		}

		                   /******************      Choose Status    *******************/

		LCD_voidGoToXY(1,0);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
		LCD_voidSendString("1-ON ");
    28a4:	84 e1       	ldi	r24, 0x14	; 20
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		LCD_voidGoToXY(1,7);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	67 e0       	ldi	r22, 0x07	; 7
    28b0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
		LCD_voidSendString("2-OFF");
    28b4:	8a e1       	ldi	r24, 0x1A	; 26
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		do{
			Local_press=KPD_u8GetPressedKey();
    28bc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    28c0:	8c 83       	std	Y+4, r24	; 0x04

		} while(Local_press==0xff );
    28c2:	8c 81       	ldd	r24, Y+4	; 0x04
    28c4:	8f 3f       	cpi	r24, 0xFF	; 255
    28c6:	d1 f3       	breq	.-12     	; 0x28bc <ROOM_OPTIONS+0x188>

		spi_transmit(Local_press);
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <spi_transmit>
		if(roomnum==ROOM1)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	81 33       	cpi	r24, 0x31	; 49
    28d2:	31 f4       	brne	.+12     	; 0x28e0 <ROOM_OPTIONS+0x1ac>
		{
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);}
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	63 e0       	ldi	r22, 0x03	; 3
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    28de:	08 c0       	rjmp	.+16     	; 0x28f0 <ROOM_OPTIONS+0x1bc>
		else if(roomnum==ROOM2)
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	82 33       	cpi	r24, 0x32	; 50
    28e4:	29 f4       	brne	.+10     	; 0x28f0 <ROOM_OPTIONS+0x1bc>
		{

			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	64 e0       	ldi	r22, 0x04	; 4
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
		}
		Options();
    28f0:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <Options>
    28f4:	61 c0       	rjmp	.+194    	; 0x29b8 <ROOM_OPTIONS+0x284>

	}
	                /***************************** CONTROL TV **********************************/
	else if(Local_press=='3')
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	83 33       	cpi	r24, 0x33	; 51
    28fa:	09 f0       	breq	.+2      	; 0x28fe <ROOM_OPTIONS+0x1ca>
    28fc:	47 c0       	rjmp	.+142    	; 0x298c <ROOM_OPTIONS+0x258>
	{
		u8 Local_u8RecieveStatus=0;
    28fe:	19 82       	std	Y+1, r1	; 0x01
		LCD_voidClearScreen();
    2900:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
		                  /******************      Current Status    *******************/
		Local_u8RecieveStatus=SPI_u8Transceive(10);
    2904:	8a e0       	ldi	r24, 0x0A	; 10
    2906:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <SPI_u8Transceive>
    290a:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendString("Status:" );
    290c:	85 e0       	ldi	r24, 0x05	; 5
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		if(Local_u8RecieveStatus==1)
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	29 f4       	brne	.+10     	; 0x2924 <ROOM_OPTIONS+0x1f0>
		{
			LCD_voidSendString("ON");
    291a:	8d e0       	ldi	r24, 0x0D	; 13
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <ROOM_OPTIONS+0x1fe>
		}
		else if(Local_u8RecieveStatus==0)
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	88 23       	and	r24, r24
    2928:	21 f4       	brne	.+8      	; 0x2932 <ROOM_OPTIONS+0x1fe>
		{
			LCD_voidSendString("OFF");
    292a:	80 e1       	ldi	r24, 0x10	; 16
    292c:	91 e0       	ldi	r25, 0x01	; 1
    292e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		}

		                   /******************      Choose Status    *******************/

		LCD_voidGoToXY(1,0);
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
		LCD_voidSendString("1-ON ");
    293a:	84 e1       	ldi	r24, 0x14	; 20
    293c:	91 e0       	ldi	r25, 0x01	; 1
    293e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
		LCD_voidGoToXY(1,7);
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	67 e0       	ldi	r22, 0x07	; 7
    2946:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
		LCD_voidSendString("2-OFF");
    294a:	8a e1       	ldi	r24, 0x1A	; 26
    294c:	91 e0       	ldi	r25, 0x01	; 1
    294e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>

		do
		{
			Local_press=KPD_u8GetPressedKey();
    2952:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    2956:	8c 83       	std	Y+4, r24	; 0x04

		} while(Local_press==0xff );
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	8f 3f       	cpi	r24, 0xFF	; 255
    295c:	d1 f3       	breq	.-12     	; 0x2952 <ROOM_OPTIONS+0x21e>

		spi_transmit(Local_press);
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <spi_transmit>
		if(roomnum==ROOM1)
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	81 33       	cpi	r24, 0x31	; 49
    2968:	31 f4       	brne	.+12     	; 0x2976 <ROOM_OPTIONS+0x242>
		{
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);}
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	63 e0       	ldi	r22, 0x03	; 3
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    2974:	08 c0       	rjmp	.+16     	; 0x2986 <ROOM_OPTIONS+0x252>
		else if(roomnum==ROOM2)
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	82 33       	cpi	r24, 0x32	; 50
    297a:	29 f4       	brne	.+10     	; 0x2986 <ROOM_OPTIONS+0x252>
		{
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	64 e0       	ldi	r22, 0x04	; 4
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
		}
		Options();
    2986:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <Options>
    298a:	16 c0       	rjmp	.+44     	; 0x29b8 <ROOM_OPTIONS+0x284>

	}

          /*********************************** Back To Rooms **************************************/
	else if(Local_press=='4')
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	84 33       	cpi	r24, 0x34	; 52
    2990:	99 f4       	brne	.+38     	; 0x29b8 <ROOM_OPTIONS+0x284>
	{
		if(roomnum==ROOM1)
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	81 33       	cpi	r24, 0x31	; 49
    2996:	31 f4       	brne	.+12     	; 0x29a4 <ROOM_OPTIONS+0x270>
		{
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);}
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	63 e0       	ldi	r22, 0x03	; 3
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
    29a2:	08 c0       	rjmp	.+16     	; 0x29b4 <ROOM_OPTIONS+0x280>
		else if(roomnum==ROOM2)
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	82 33       	cpi	r24, 0x32	; 50
    29a8:	29 f4       	brne	.+10     	; 0x29b4 <ROOM_OPTIONS+0x280>
		{
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	64 e0       	ldi	r22, 0x04	; 4
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
		}
             Options();
    29b4:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <Options>
	}


}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <Options>:


/******************************************* Choose Room ***********************************************/
void Options(void)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <Options+0x6>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_press=0,Local_flag=0;
    29d2:	1a 82       	std	Y+2, r1	; 0x02
    29d4:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidClearScreen();
    29d6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <LCD_voidClearScreen>
	LCD_voidSendString("PLZ Choose Room:");
    29da:	80 e2       	ldi	r24, 0x20	; 32
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	LCD_voidGoToXY(1,0);
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
	LCD_voidSendString("1-ROOM1");
    29ea:	81 e3       	ldi	r24, 0x31	; 49
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>
	LCD_voidGoToXY(1,8);
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	68 e0       	ldi	r22, 0x08	; 8
    29f6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LCD_voidGoToXY>
	LCD_voidSendString("2-ROOM2");
    29fa:	89 e3       	ldi	r24, 0x39	; 57
    29fc:	91 e0       	ldi	r25, 0x01	; 1
    29fe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_voidSendString>

	do{
		Local_press=KPD_u8GetPressedKey();
    2a02:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <KPD_u8GetPressedKey>
    2a06:	8a 83       	std	Y+2, r24	; 0x02

	}
	while(Local_press==0xff );
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a0c:	d1 f3       	breq	.-12     	; 0x2a02 <Options+0x3a>


	if(Local_press!=0){
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	88 23       	and	r24, r24
    2a12:	11 f0       	breq	.+4      	; 0x2a18 <Options+0x50>
		Local_flag=1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	89 83       	std	Y+1, r24	; 0x01

	}
	if(Local_flag==1)
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	49 f4       	brne	.+18     	; 0x2a30 <Options+0x68>
	{
		spi_transmit(Local_press);
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <spi_transmit>
		LCD_voidSendData(Local_press);
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendData>
		ROOM_OPTIONS(Local_press);
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	0e 94 9a 13 	call	0x2734	; 0x2734 <ROOM_OPTIONS>
	}

}
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <motorinit>:
#include "DIO_INTERFACE.h"
#include <avr/io.h>
#include <util/delay.h>
#include "motor.h"
void motorinit()
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(motorport,motorpin1,DIO_PIN_OUT);
    2a42:	83 e0       	ldi	r24, 0x03	; 3
    2a44:	66 e0       	ldi	r22, 0x06	; 6
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(motorport,motorpin2,DIO_PIN_OUT);
    2a4c:	83 e0       	ldi	r24, 0x03	; 3
    2a4e:	67 e0       	ldi	r22, 0x07	; 7
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DIO_u8SetPinDir>
}
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <clockwise>:
void clockwise()
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(motorport,motorpin1,1);
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	66 e0       	ldi	r22, 0x06	; 6
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(motorport,motorpin2,DIO_LOW);
    2a6e:	83 e0       	ldi	r24, 0x03	; 3
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>

}
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <anticlock>:
void anticlock()
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(motorport,motorpin1,DIO_LOW);
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	66 e0       	ldi	r22, 0x06	; 6
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(motorport,motorpin2,DIO_HIGH);
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	67 e0       	ldi	r22, 0x07	; 7
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <stop>:
void stop()
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(motorport,motorpin1,DIO_LOW);
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	66 e0       	ldi	r22, 0x06	; 6
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(motorport,motorpin2,DIO_LOW);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	67 e0       	ldi	r22, 0x07	; 7
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_u8SetPinValue>
}
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <__udivmodsi4>:
    2ac2:	a1 e2       	ldi	r26, 0x21	; 33
    2ac4:	1a 2e       	mov	r1, r26
    2ac6:	aa 1b       	sub	r26, r26
    2ac8:	bb 1b       	sub	r27, r27
    2aca:	fd 01       	movw	r30, r26
    2acc:	0d c0       	rjmp	.+26     	; 0x2ae8 <__udivmodsi4_ep>

00002ace <__udivmodsi4_loop>:
    2ace:	aa 1f       	adc	r26, r26
    2ad0:	bb 1f       	adc	r27, r27
    2ad2:	ee 1f       	adc	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	a2 17       	cp	r26, r18
    2ad8:	b3 07       	cpc	r27, r19
    2ada:	e4 07       	cpc	r30, r20
    2adc:	f5 07       	cpc	r31, r21
    2ade:	20 f0       	brcs	.+8      	; 0x2ae8 <__udivmodsi4_ep>
    2ae0:	a2 1b       	sub	r26, r18
    2ae2:	b3 0b       	sbc	r27, r19
    2ae4:	e4 0b       	sbc	r30, r20
    2ae6:	f5 0b       	sbc	r31, r21

00002ae8 <__udivmodsi4_ep>:
    2ae8:	66 1f       	adc	r22, r22
    2aea:	77 1f       	adc	r23, r23
    2aec:	88 1f       	adc	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	1a 94       	dec	r1
    2af2:	69 f7       	brne	.-38     	; 0x2ace <__udivmodsi4_loop>
    2af4:	60 95       	com	r22
    2af6:	70 95       	com	r23
    2af8:	80 95       	com	r24
    2afa:	90 95       	com	r25
    2afc:	9b 01       	movw	r18, r22
    2afe:	ac 01       	movw	r20, r24
    2b00:	bd 01       	movw	r22, r26
    2b02:	cf 01       	movw	r24, r30
    2b04:	08 95       	ret

00002b06 <__prologue_saves__>:
    2b06:	2f 92       	push	r2
    2b08:	3f 92       	push	r3
    2b0a:	4f 92       	push	r4
    2b0c:	5f 92       	push	r5
    2b0e:	6f 92       	push	r6
    2b10:	7f 92       	push	r7
    2b12:	8f 92       	push	r8
    2b14:	9f 92       	push	r9
    2b16:	af 92       	push	r10
    2b18:	bf 92       	push	r11
    2b1a:	cf 92       	push	r12
    2b1c:	df 92       	push	r13
    2b1e:	ef 92       	push	r14
    2b20:	ff 92       	push	r15
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	ca 1b       	sub	r28, r26
    2b30:	db 0b       	sbc	r29, r27
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	09 94       	ijmp

00002b3e <__epilogue_restores__>:
    2b3e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b40:	39 88       	ldd	r3, Y+17	; 0x11
    2b42:	48 88       	ldd	r4, Y+16	; 0x10
    2b44:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b46:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b48:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b50:	b9 84       	ldd	r11, Y+9	; 0x09
    2b52:	c8 84       	ldd	r12, Y+8	; 0x08
    2b54:	df 80       	ldd	r13, Y+7	; 0x07
    2b56:	ee 80       	ldd	r14, Y+6	; 0x06
    2b58:	fd 80       	ldd	r15, Y+5	; 0x05
    2b5a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b5c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b5e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b60:	b9 81       	ldd	r27, Y+1	; 0x01
    2b62:	ce 0f       	add	r28, r30
    2b64:	d1 1d       	adc	r29, r1
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	ed 01       	movw	r28, r26
    2b72:	08 95       	ret

00002b74 <_exit>:
    2b74:	f8 94       	cli

00002b76 <__stop_program>:
    2b76:	ff cf       	rjmp	.-2      	; 0x2b76 <__stop_program>
